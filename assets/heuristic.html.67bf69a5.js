import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as p,c as e,e as a,a as n,d as s}from"./app.2d48c0a5.js";const o={},c=a('<h1 id="\u542F\u53D1\u5F0F\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u542F\u53D1\u5F0F\u641C\u7D22" aria-hidden="true">#</a> \u542F\u53D1\u5F0F\u641C\u7D22</h1><p>\u672C\u9875\u9762\u5C06\u7B80\u8981\u4ECB\u7ECD\u542F\u53D1\u5F0F\u641C\u7D22\u53CA\u5176\u7528\u6CD5\u3002</p><h2 id="\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u7B80\u4ECB" aria-hidden="true">#</a> \u7B80\u4ECB</h2><p>\u542F\u53D1\u5F0F\u641C\u7D22\uFF08\u82F1\u6587\uFF1Aheuristic search\uFF09\u662F\u4E00\u79CD\u6539\u8FDB\u7684\u641C\u7D22\u7B97\u6CD5\u3002\u5B83\u5728\u666E\u901A\u641C\u7D22\u7B97\u6CD5\u7684\u57FA\u7840\u4E0A\u5F15\u5165\u4E86\u542F\u53D1\u5F0F\u51FD\u6570\uFF0C\u8BE5\u51FD\u6570\u7684\u4F5C\u7528\u662F\u57FA\u4E8E\u5DF2\u6709\u7684\u4FE1\u606F\u5BF9\u641C\u7D22\u7684\u6BCF\u4E00\u4E2A\u5206\u652F\u9009\u62E9\u90FD\u505A\u4F30\u4EF7\uFF0C\u8FDB\u800C\u9009\u62E9\u5206\u652F\u3002\u7B80\u5355\u6765\u8BF4\uFF0C\u542F\u53D1\u5F0F\u641C\u7D22\u5C31\u662F\u5BF9\u53D6\u548C\u4E0D\u53D6\u90FD\u505A\u5206\u6790\uFF0C\u4ECE\u4E2D\u9009\u53D6\u66F4\u4F18\u89E3\u6216\u5220\u53BB\u65E0\u6548\u89E3\u3002</p><h2 id="\u4F8B\u9898" tabindex="-1"><a class="header-anchor" href="#\u4F8B\u9898" aria-hidden="true">#</a> \u4F8B\u9898</h2><p>\u7531\u4E8E\u6982\u5FF5\u8FC7\u4E8E\u62BD\u8C61\uFF0C\u8FD9\u91CC\u4F7F\u7528\u4F8B\u9898\u8BB2\u89E3\u3002</p>',6),l=n("div",{class:"custom-container note"},[n("p",{class:"custom-container-title"},"[\u300CNOIP2005 \u666E\u53CA\u7EC4\u300D\u91C7\u836F](https://www.luogu.com.cn/problem/P1048)"),n("p",null,[s("\u200B \u9898\u76EE\u5927\u610F\uFF1A\u6709 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N")]),n("annotation",{encoding:"application/x-tex"},"N")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s(" \u79CD\u7269\u54C1\u548C\u4E00\u4E2A\u5BB9\u91CF\u4E3A "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"W")]),n("annotation",{encoding:"application/x-tex"},"W")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W")])])]),s(" \u7684\u80CC\u5305\uFF0C\u6BCF\u79CD\u7269\u54C1\u6709\u91CD\u91CF "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"w"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"w_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" \u548C\u4EF7\u503C "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"v"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"v_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" \u4E24\u79CD\u5C5E\u6027\uFF0C\u8981\u6C42\u9009\u82E5\u5E72\u4E2A\u7269\u54C1\uFF08\u6BCF\u79CD\u7269\u54C1\u53EA\u80FD\u9009\u4E00\u6B21\uFF09\u653E\u5165\u80CC\u5305\uFF0C\u4F7F\u80CC\u5305\u4E2D\u7269\u54C1\u7684\u603B\u4EF7\u503C\u6700\u5927\uFF0C\u4E14\u80CC\u5305\u4E2D\u7269\u54C1\u7684\u603B\u91CD\u91CF\u4E0D\u8D85\u8FC7\u80CC\u5305\u7684\u5BB9\u91CF\u3002")])],-1),i=n("div",{class:"custom-container note"},[n("p",{class:"custom-container-title"},"\u89E3\u9898\u601D\u8DEF"),n("p",null,[s("\u200B \u6211\u4EEC\u5199\u4E00\u4E2A\u4F30\u4EF7\u51FD\u6570 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f")]),n("annotation",{encoding:"application/x-tex"},"f")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),s("\uFF0C\u53EF\u4EE5\u526A\u6389\u6240\u6709\u65E0\u6548\u7684 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s(" \u679D\u6761\uFF08\u5C31\u662F\u526A\u53BB\u5927\u91CF\u65E0\u7528\u4E0D\u9009\u679D\u6761\uFF09\u3002")]),n("p",null,[s("\u200B \u4F30\u4EF7\u51FD\u6570 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f")]),n("annotation",{encoding:"application/x-tex"},"f")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),s(" \u7684\u8FD0\u884C\u8FC7\u7A0B\u5982\u4E0B\uFF1A")]),n("p",null,"\u200B \u6211\u4EEC\u5728\u53D6\u7684\u65F6\u5019\u5224\u65AD\u4E00\u4E0B\u662F\u4E0D\u662F\u8D85\u8FC7\u4E86\u89C4\u5B9A\u4F53\u79EF\uFF08\u53EF\u884C\u6027\u526A\u679D\uFF09\uFF1B\u5728\u4E0D\u53D6\u7684\u65F6\u5019\u5224\u65AD\u4E00\u4E0B\u4E0D\u53D6\u8FD9\u4E2A\u65F6\uFF0C\u5269\u4E0B\u7684\u836F\u6240\u6709\u7684\u4EF7\u503C + \u73B0\u6709\u7684\u4EF7\u503C\u662F\u5426\u5927\u4E8E\u76EE\u524D\u627E\u5230\u7684\u6700\u4F18\u89E3\uFF08\u6700\u4F18\u6027\u526A\u679D\uFF09\u3002")],-1),u=a(`<details class="custom-container details"><summary>\u793A\u4F8B\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  <span class="token comment">// a \u4EE3\u8868\u65F6\u95F4\uFF0Cb \u4EE3\u8868\u4EF7\u503C</span>
  <span class="token keyword">double</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span> node<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>Node p<span class="token punctuation">,</span> Node q<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>f <span class="token operator">&gt;</span> q<span class="token punctuation">.</span>f<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u8BA1\u7B97\u5728\u5F53\u524D\u65F6\u95F4\u4E0B\uFF0C\u5269\u4F59\u7269\u54C1\u7684\u6700\u5927\u4EF7\u503C</span>
  <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">+</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;=</span> node<span class="token punctuation">[</span>t <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      v <span class="token operator">-=</span> node<span class="token punctuation">[</span>t <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
      tot <span class="token operator">+=</span> node<span class="token punctuation">[</span>t <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tot <span class="token operator">+</span> v <span class="token operator">*</span> node<span class="token punctuation">[</span>t <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> tot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                         <span class="token comment">// \u8FB9\u754C\u6761\u4EF6\uFF1A\u53EA\u6709n\u79CD\u7269\u54C1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> v <span class="token operator">&gt;</span> ans<span class="token punctuation">)</span> <span class="token function">work</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u6700\u4F18\u6027\u526A\u679D</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span> <span class="token function">work</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">-</span> node<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> v <span class="token operator">+</span> node<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u53EF\u884C\u6027\u526A\u679D</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">/</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token comment">// f\u4E3A\u6027\u4EF7\u6BD4</span>
  <span class="token punctuation">}</span>
  <span class="token function">sort</span><span class="token punctuation">(</span>node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> node <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u6839\u636E\u6027\u4EF7\u6BD4\u6392\u5E8F</span>
  <span class="token function">work</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1),r=[c,l,i,u];function k(m,d){return p(),e("div",null,r)}var w=t(o,[["render",k],["__file","heuristic.html.vue"]]);export{w as default};
