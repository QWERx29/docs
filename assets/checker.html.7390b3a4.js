import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{o as i,c as u,a as n,b as a,w as o,d as s,e as c,r as e}from"./app.6d7cb999.js";const k={},r=n("h1",{id:"checker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#checker","aria-hidden":"true"},"#"),s(" Checker")],-1),d=s("Checker\uFF0C\u5373 "),m=s("Special Judge"),v=s("\uFF0C\u7528\u4E8E\u68C0\u9A8C\u7B54\u6848\u662F\u5426\u5408\u6CD5\u3002\u4F7F\u7528 Testlib \u53EF\u4EE5\u8BA9\u6211\u4EEC\u514D\u53BB\u68C0\u9A8C\u8BB8\u591A\u4E1C\u897F\uFF0C\u4F7F\u7F16\u5199\u7B80\u5355\u8BB8\u591A\u3002"),b=n("p",null,"Checker \u4ECE\u547D\u4EE4\u884C\u53C2\u6570\u8BFB\u53D6\u5230\u8F93\u5165\u6587\u4EF6\u540D\u3001\u9009\u624B\u8F93\u51FA\u6587\u4EF6\u540D\u3001\u6807\u51C6\u8F93\u51FA\u6587\u4EF6\u540D\uFF0C\u5E76\u786E\u5B9A\u9009\u624B\u8F93\u51FA\u662F\u5426\u6B63\u786E\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u9884\u5B9A\u4E49\u7684\u7ED3\u679C\uFF1A",-1),h=s("\u8BF7\u5728\u9605\u8BFB\u4E0B\u6587\u524D\u5148\u9605\u8BFB "),f=s("\u901A\u7528"),g=s("\u3002"),w=n("h2",{id:"\u7B80\u5355\u7684\u4F8B\u5B50",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7B80\u5355\u7684\u4F8B\u5B50","aria-hidden":"true"},"#"),s(" \u7B80\u5355\u7684\u4F8B\u5B50")],-1),y=n("div",{class:"custom-container note"},[n("p",{class:"custom-container-title"},"\u9898\u76EE"),n("p",null,[s("\u200B \u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a"),n("mo",{separator:"true"},","),n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"a,b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"b")])])]),s("\uFF08"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"\u2212"),n("mn",null,"1000"),n("mtext",null,"\u2009"),n("mo",null,"\u2264"),n("mtext",null,"\u2009"),n("mi",null,"a"),n("mo",{separator:"true"},","),n("mi",null,"b"),n("mtext",null,"\u2009"),n("mo",null,"\u2264"),n("mn",null,"1000")]),n("annotation",{encoding:"application/x-tex"},"-1000\u2009\\le\u2009a,b\u2009\\le 1000")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),n("span",{class:"mord"},"\u2212"),n("span",{class:"mord"},"1000\u2009"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"\u2264"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"\u2009"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord"},"\u2009"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"\u2264"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1000")])])]),s("\uFF09\uFF0C\u8F93\u51FA\u5B83\u4EEC\u7684\u548C\u3002")])],-1),_=c(`<p>\u8FD9\u9898\u663E\u7136\u4E0D\u9700\u8981 checker \u5BF9\u5427\uFF0C\u4F46\u662F\u5982\u679C\u4E00\u5B9A\u8981\u7684\u8BDD\u4E5F\u53EF\u4EE5\u5199\u4E00\u4E2A\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;testlib.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> pans <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">&quot;sum of numbers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u5047\u5B9A\u6807\u51C6\u8F93\u51FA\u662F\u6B63\u786E\u7684\uFF0C\u4E0D\u68C0\u67E5\u5176\u8303\u56F4</span>
  <span class="token comment">// \u4E4B\u540E\u6211\u4EEC\u4F1A\u770B\u5230\u8FD9\u5E76\u4E0D\u5408\u7406</span>
  <span class="token keyword">int</span> jans <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>pans <span class="token operator">==</span> jans<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_ok<span class="token punctuation">,</span> <span class="token string">&quot;The sum is correct.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;The sum is wrong: expected = %d, found = %d&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span> pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7F16\u5199-readans-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7F16\u5199-readans-\u51FD\u6570" aria-hidden="true">#</a> \u7F16\u5199 readAns \u51FD\u6570</h2>`,3),x=n("p",null,[s("\u5047\u8BBE\u4F60\u6709\u4E00\u9053\u9898\u8F93\u5165\u8F93\u51FA\u5747\u6709\u5F88\u591A\u6570\uFF0C\u5982\uFF1A\u7ED9\u5B9A\u4E00\u5F20 DAG\uFF0C\u6C42 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"s")]),n("annotation",{encoding:"application/x-tex"},"s")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"s")])])]),s(" \u5230 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"t")]),n("annotation",{encoding:"application/x-tex"},"t")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6151em"}}),n("span",{class:"mord mathnormal"},"t")])])]),s(" \u7684\u6700\u957F\u8DEF\u5E76\u8F93\u51FA\u8DEF\u5F84\uFF08\u53EF\u80FD\u6709\u591A\u6761\uFF0C\u8F93\u51FA\u4EFB\u4E00\uFF09\u3002")],-1),q=c(`<p>\u4E0B\u9762\u662F\u4E00\u4E2A <strong>\u4E0D\u597D</strong> \u7684 checker \u7684\u4F8B\u5B50\u3002</p><h3 id="\u4E0D\u597D\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u4E0D\u597D\u7684\u5B9E\u73B0" aria-hidden="true">#</a> \u4E0D\u597D\u7684\u5B9E\u73B0</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// clang-format off</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;testlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> edges<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u4E0D\u9700\u8981 readSpace() \u6216 readEoln()</span>
  <span class="token keyword">int</span> m <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u56E0\u4E3A\u4E0D\u9700\u8981\u5728 checker \u4E2D\u68C0\u67E5\u6807\u51C6\u8F93\u5165\u5408\u6CD5\u6027\uFF08\u6709</span>
                          <span class="token comment">// validator\uFF09</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> w <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> s <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> t <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8BFB\u5165\u6807\u51C6\u8F93\u51FA</span>
  <span class="token keyword">int</span> jvalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> jpath<span class="token punctuation">;</span>
  <span class="token keyword">int</span> jlen <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jpath<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jvalue <span class="token operator">+=</span> edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>jpath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> jpath<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8BFB\u5165\u9009\u624B\u8F93\u51FA</span>
  <span class="token keyword">int</span> pvalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ppath<span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">used</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> plen <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">&quot;number of vertices&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u81F3\u5C11\u5305\u542B s \u548C t \u4E24\u4E2A\u70B9</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;path[%d]&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// \u68C0\u67E5\u6BCF\u6761\u8FB9\u662F\u5426\u53EA\u7528\u5230\u4E00\u6B21</span>
      <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;vertex %d was used twice&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    used<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    ppath<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u68C0\u67E5\u8D77\u70B9\u7EC8\u70B9\u5408\u6CD5\u6027</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ppath<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;path doesn&#39;t start in s: expected s = %d, found %d&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span>
          ppath<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ppath<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;path doesn&#39;t finish in t: expected t = %d, found %d&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span>
          ppath<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u68C0\u67E5\u76F8\u90BB\u70B9\u95F4\u662F\u5426\u6709\u8FB9</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>ppath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ppath<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> edges<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;there is no edge (%d, %d) in the graph&quot;</span><span class="token punctuation">,</span> ppath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            ppath<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pvalue <span class="token operator">+=</span> edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>ppath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ppath<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>jvalue <span class="token operator">!=</span> pvalue<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;jury has answer %d, participant has answer %d&quot;</span><span class="token punctuation">,</span> jvalue<span class="token punctuation">,</span> pvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_ok<span class="token punctuation">,</span> <span class="token string">&quot;answer = %d&quot;</span><span class="token punctuation">,</span> pvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A checker \u4E3B\u8981\u6709\u4E24\u4E2A\u95EE\u9898\uFF1A</p><ol><li>\u5B83\u786E\u4FE1\u6807\u51C6\u8F93\u51FA\u662F\u6B63\u786E\u7684\u3002\u5982\u679C\u9009\u624B\u8F93\u51FA\u6BD4\u6807\u51C6\u8F93\u51FA\u66F4\u4F18\uFF0C\u5B83\u4F1A\u88AB\u5224\u6210 WA\uFF0C\u8FD9\u4E0D\u592A\u5999\u3002\u540C\u65F6\uFF0C\u5982\u679C\u6807\u51C6\u8F93\u51FA\u4E0D\u5408\u6CD5\uFF0C\u4E5F\u4F1A\u4EA7\u751F WA\u3002\u5BF9\u4E8E\u8FD9\u4E24\u79CD\u60C5\u51B5\uFF0C\u6B63\u786E\u7684\u64CD\u4F5C\u90FD\u662F\u8FD4\u56DE Fail \u72B6\u6001\u3002</li><li>\u8BFB\u5165\u6807\u51C6\u8F93\u51FA\u548C\u9009\u624B\u8F93\u51FA\u7684\u4EE3\u7801\u662F\u91CD\u590D\u7684\u3002\u5728\u8FD9\u9053\u9898\u4E2D\u5199\u4E24\u904D\u8BFB\u5165\u95EE\u9898\u4E0D\u5927\uFF0C\u53EA\u9700\u8981\u4E00\u4E2A <code>for</code> \u5FAA\u73AF\uFF1B\u4F46\u662F\u5982\u679C\u6709\u4E00\u9053\u9898\u8F93\u51FA\u5F88\u590D\u6742\uFF0C\u5C31\u4F1A\u5BFC\u81F4\u4F60\u7684 checker \u7ED3\u6784\u6DF7\u4E71\u3002\u91CD\u590D\u4EE3\u7801\u4F1A\u5927\u5927\u964D\u4F4E\u53EF\u7EF4\u62A4\u6027\uFF0C\u8BA9\u4F60\u5728 debug \u6216\u4FEE\u6539\u683C\u5F0F\u65F6\u53D8\u5F97\u56F0\u96BE\u3002</li></ol><p>\u8BFB\u5165\u6807\u51C6\u8F93\u51FA\u548C\u9009\u624B\u8F93\u51FA\u7684\u65B9\u5F0F\u5B9E\u9645\u4E0A\u662F\u5B8C\u5168\u76F8\u540C\u7684\uFF0C\u8FD9\u5C31\u662F\u6211\u4EEC\u901A\u5E38\u7F16\u5199\u4E00\u4E2A\u7528\u6D41\u4F5C\u4E3A\u53C2\u6570\u7684\u8BFB\u5165\u51FD\u6570\u7684\u539F\u56E0\u3002</p><h3 id="\u597D\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u597D\u7684\u5B9E\u73B0" aria-hidden="true">#</a> \u597D\u7684\u5B9E\u73B0</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// clang-format off</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;testlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> edges<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>

<span class="token comment">// \u8FD9\u4E2A\u51FD\u6570\u63A5\u53D7\u4E00\u4E2A\u6D41\uFF0C\u4ECE\u5176\u4E2D\u8BFB\u5165</span>
<span class="token comment">// \u68C0\u67E5\u8DEF\u5F84\u7684\u5408\u6CD5\u6027\u5E76\u8FD4\u56DE\u8DEF\u5F84\u957F\u5EA6</span>
<span class="token comment">// \u5F53 stream \u4E3A ans \u65F6\uFF0C\u6240\u6709 stream.quitf(_wa, ...)</span>
<span class="token comment">// \u548C\u5931\u8D25\u7684 readXxx() \u5747\u4F1A\u8FD4\u56DE _fail \u800C\u975E _wa</span>
<span class="token comment">// \u4E5F\u5C31\u662F\u8BF4\uFF0C\u5982\u679C\u8F93\u51FA\u975E\u6CD5\uFF0C\u5BF9\u4E8E\u9009\u624B\u8F93\u51FA\u6D41\u5B83\u5C06\u8FD4\u56DE _wa\uFF0C</span>
<span class="token comment">// \u5BF9\u4E8E\u6807\u51C6\u8F93\u51FA\u6D41\u5B83\u5C06\u8FD4\u56DE _fail</span>
<span class="token keyword">int</span> <span class="token function">readAns</span><span class="token punctuation">(</span>InStream<span class="token operator">&amp;</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BFB\u5165\u8F93\u51FA</span>
  <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> path<span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">used</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> len <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">&quot;number of vertices&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;path[%d]&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stream<span class="token punctuation">.</span><span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;vertex %d was used twice&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    used<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">)</span>
    stream<span class="token punctuation">.</span><span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;path doesn&#39;t start in s: expected s = %d, found %d&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span>
                 path<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">)</span>
    stream<span class="token punctuation">.</span><span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;path doesn&#39;t finish in t: expected t = %d, found %d&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span>
                 path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> edges<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      stream<span class="token punctuation">.</span><span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;there is no edge (%d, %d) in the graph&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
                   path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    value <span class="token operator">+=</span> edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  n <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  m <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> w <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> edges<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> s <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> t <span class="token operator">=</span> inf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> jans <span class="token operator">=</span> <span class="token function">readAns</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> pans <span class="token operator">=</span> <span class="token function">readAns</span><span class="token punctuation">(</span>ouf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>jans <span class="token operator">&gt;</span> pans<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;jury has the better answer: jans = %d, pans = %d\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
          pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jans <span class="token operator">==</span> pans<span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_ok<span class="token punctuation">,</span> <span class="token string">&quot;answer = %d\\n&quot;</span><span class="token punctuation">,</span> pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>  <span class="token comment">// (jans &lt; pans)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">&quot;:( participant has the better answer: jans = %d, pans = %d\\n&quot;</span><span class="token punctuation">,</span>
          jans<span class="token punctuation">,</span> pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610F\u5230\u8FD9\u79CD\u5199\u6CD5\u6211\u4EEC\u540C\u65F6\u4E5F\u68C0\u67E5\u4E86\u6807\u51C6\u8F93\u51FA\u662F\u5426\u5408\u6CD5\uFF0C\u8FD9\u6837\u5199 checker \u8BA9\u7A0B\u5E8F\u66F4\u77ED\uFF0C\u4E14\u6613\u4E8E\u7406\u89E3\u548C debug\u3002\u6B64\u79CD\u5199\u6CD5\u4E5F\u9002\u7528\u4E8E\u8F93\u51FA YES\uFF08\u5E76\u8F93\u51FA\u65B9\u6848\u4EC0\u4E48\u7684\uFF09\uFF0C\u6216 NO \u7684\u9898\u76EE\u3002</p><div class="custom-container note"><p class="custom-container-title">\u6CE8</p><p>\u200B \u5BF9\u4E8E\u67D0\u4E9B\u9650\u5236\u7684\u68C0\u67E5\u53EF\u4EE5\u7528 <code>InStream::ensure/ensuref()</code> \u51FD\u6570\u66F4\u7B80\u6D01\u5730\u5B9E\u73B0\u3002\u5982\u4E0A\u4F8B\u7B2C 23 \u81F3 25 \u884C\u4E5F\u53EF\u4EE5\u7B49\u4EF7\u5730\u5199\u6210\u5982\u4E0B\u5F62\u5F0F\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>stream<span class="token punctuation">.</span><span class="token function">ensuref</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;vertex %d was used twice&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u6CE8\u610F</p><p>\u200B \u8BF7\u5728 <code>readAns</code> \u4E2D\u907F\u514D\u8C03\u7528 <strong>\u5168\u5C40</strong> \u51FD\u6570 <code>::ensure/ensuref()</code>\uFF0C\u8FD9\u4F1A\u5BFC\u81F4\u5728\u67D0\u4E9B\u5E94\u5224\u4E3A WA \u7684\u9009\u624B\u8F93\u51FA\u4E0B\u8FD4\u56DE <code>_fail</code>\uFF0C\u4EA7\u751F\u9519\u8BEF\u3002</p></div><h2 id="\u5EFA\u8BAE\u4E0E\u5E38\u89C1\u9519\u8BEF" tabindex="-1"><a class="header-anchor" href="#\u5EFA\u8BAE\u4E0E\u5E38\u89C1\u9519\u8BEF" aria-hidden="true">#</a> \u5EFA\u8BAE\u4E0E\u5E38\u89C1\u9519\u8BEF</h2><ul><li><p>\u7F16\u5199 <code>readAns</code> \u51FD\u6570\uFF0C\u5B83\u771F\u7684\u53EF\u4EE5\u8BA9\u4F60\u7684 checker \u53D8\u5F97\u5F88\u68D2\u3002</p></li><li><p>\u8BFB\u5165\u9009\u624B\u8F93\u51FA\u65F6\u6C38\u8FDC\u9650\u5B9A\u597D\u8303\u56F4\uFF0C\u5982\u679C\u67D0\u4E9B\u53D8\u91CF\u5FD8\u8BB0\u4E86\u9650\u5B9A\u4E14\u88AB\u7528\u4E8E\u67D0\u4E9B\u53C2\u6570\uFF0C\u4F60\u7684 checker \u53EF\u80FD\u4F1A\u5224\u5B9A\u9519\u8BEF\u6216 RE \u7B49\u3002</p><ul><li>\u53CD\u9762\u6559\u6750</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// ....</span>
<span class="token keyword">int</span> k <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lst<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// k = 0 \u548C k = -5 \u5728\u8FD9\u91CC\u4F5C\u7528\u76F8\u540C\uFF08\u4E0D\u4F1A\u8FDB\u5165\u5FAA\u73AF\u4F53\uFF09</span>
  lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u4F46\u662F\u6211\u4EEC\u5E76\u4E0D\u60F3\u63A5\u53D7\u4E00\u4E2A\u957F\u5EA6\u4E3A -5 \u7684 list\uFF0C\u4E0D\u662F\u5417\uFF1F</span>
<span class="token comment">// ....</span>
<span class="token keyword">int</span> pos <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> A<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// \u53EF\u80FD\u4F1A\u6709\u4EBA\u8F93\u51FA -42, 2147483456 \u6216\u5176\u4ED6\u4E00\u4E9B\u975E\u6CD5\u6570\u5B57\u5BFC\u81F4 checker RE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6B63\u9762\u6559\u6750</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// ....</span>
<span class="token keyword">int</span> k <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u957F\u5EA6\u4E0D\u5408\u6CD5\u4F1A\u7ACB\u523B\u5224 WA \u800C\u4E0D\u4F1A\u7EE7\u7EED check \u5BFC\u81F4 RE</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lst<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ....</span>
<span class="token keyword">int</span> pos <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u9632\u6B62 out of range</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> A<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// ....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u4F7F\u7528\u9879\u522B\u540D\u3002</p></li><li><p>\u548C validator \u4E0D\u540C\uFF0Cchecker \u4E0D\u7528\u7279\u610F\u68C0\u67E5\u975E\u7A7A\u5B57\u7B26\u3002\u4F8B\u5982\u5BF9\u4E8E\u4E00\u4E2A\u6309\u987A\u5E8F\u6BD4\u8F83\u6574\u6570\u7684 checker\uFF0C\u6211\u4EEC\u53EA\u9700\u5224\u65AD\u9009\u624B\u8F93\u51FA\u7684\u6574\u6570\u548C\u7B54\u6848\u6574\u6570\u662F\u5426\u5BF9\u5E94\u76F8\u7B49\uFF0C\u800C\u9009\u624B\u662F\u6BCF\u884C\u8F93\u51FA\u4E00\u4E2A\u6574\u6570\uFF0C\u8FD8\u662F\u5728\u4E00\u884C\u4E2D\u8F93\u51FA\u6240\u6709\u6574\u6570\u7B49\u683C\u5F0F\u95EE\u9898\uFF0C\u6211\u4EEC\u7684 checker \u4E0D\u5FC5\u5173\u5FC3\u3002</p></li></ul><h2 id="\u4F7F\u7528\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u65B9\u6CD5" aria-hidden="true">#</a> \u4F7F\u7528\u65B9\u6CD5</h2><p>\u901A\u5E38\u6211\u4EEC\u4E0D\u9700\u8981\u672C\u5730\u8FD0\u884C\u5B83\uFF0C\u8BC4\u6D4B\u5DE5\u5177/OJ \u4F1A\u5E2E\u6211\u4EEC\u505A\u597D\u8FD9\u4E00\u5207\u3002\u4F46\u662F\u5982\u679C\u9700\u8981\u7684\u8BDD\uFF0C\u4EE5\u4EE5\u4E0B\u683C\u5F0F\u5728\u547D\u4EE4\u884C\u8FD0\u884C\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./checker <span class="token operator">&lt;</span>input-file<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>output-file<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>answer-file<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>report-file<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>-appes<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u4E00\u4E9B\u9884\u8BBE\u7684-checker" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E9B\u9884\u8BBE\u7684-checker" aria-hidden="true">#</a> \u4E00\u4E9B\u9884\u8BBE\u7684 checker</h2>`,17),I=s("\u5F88\u591A\u65F6\u5019\u6211\u4EEC\u7684 checker \u5B8C\u6210\u7684\u5DE5\u4F5C\u5F88\u7B80\u5355\uFF08\u5982\u5224\u65AD\u8F93\u51FA\u7684\u6574\u6570\u662F\u5426\u6B63\u786E\uFF0C\u8F93\u51FA\u7684\u6D6E\u70B9\u6570\u662F\u5426\u6EE1\u8DB3\u7CBE\u5EA6\u8981\u6C42\uFF09\uFF0C"),j={href:"https://github.com/MikeMirzayanov/testlib/tree/master/checkers",target:"_blank",rel:"noopener noreferrer"},M=s("Testlib"),A=s(" \u5DF2\u7ECF\u4E3A\u6211\u4EEC\u7ED9\u51FA\u4E86\u8FD9\u4E9B checker \u7684\u5B9E\u73B0\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u3002"),C=n("p",null,"\u4E00\u4E9B\u5E38\u7528\u7684 checker \u6709\uFF1A",-1),z=n("li",null,[n("p",null,"ncmp\uFF1A\u6309\u987A\u5E8F\u6BD4\u8F83 64 \u4F4D\u6574\u6570\u3002")],-1),E=n("li",null,[n("p",null,[s("rcmp4\uFF1A\u6309\u987A\u5E8F\u6BD4\u8F83\u6D6E\u70B9\u6570\uFF0C\u6700\u5927\u53EF\u63A5\u53D7\u8BEF\u5DEE\uFF08\u7EDD\u5BF9\u8BEF\u5DEE\u6216\u76F8\u5BF9\u8BEF\u5DEE\uFF09\u4E0D\u8D85\u8FC7 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mrow",null,[n("mo",null,"\u2212"),n("mn",null,"4")])])]),n("annotation",{encoding:"application/x-tex"},"10^{-4}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"\u2212"),n("span",{class:"mord mtight"},"4")])])])])])])])])])])]),s("\uFF08\u8FD8\u6709 rcmp6\uFF0Crcmp9 \u7B49\u5BF9\u7CBE\u5EA6\u8981\u6C42\u4E0D\u540C\u7684 checker\uFF0C\u7528\u6CD5\u548C rcmp4 \u7C7B\u4F3C\uFF09\u3002")])],-1),L=n("li",null,[n("p",null,"wcmp\uFF1A\u6309\u987A\u5E8F\u6BD4\u8F83\u5B57\u7B26\u4E32\uFF08\u4E0D\u5E26\u7A7A\u683C\uFF0C\u6362\u884C\u7B26\u7B49\u975E\u7A7A\u5B57\u7B26\uFF09\u3002")],-1),T=n("p",null,"yesno\uFF1A\u6BD4\u8F83 YES \u548C NO\uFF0C\u5927\u5C0F\u5199\u4E0D\u654F\u611F\u3002",-1),S=s("\u672C\u6587\u4E3B\u8981\u7FFB\u8BD1\u81EA "),N={href:"https://codeforces.com/blog/entry/18431",target:"_blank",rel:"noopener noreferrer"},O=s("Checkers with testlib.h - Codeforces"),R=s("\u3002"),V=n("code",null,"testlib.h",-1),W=s(" \u7684 GitHub \u5B58\u50A8\u5E93\u4E3A "),B={href:"https://github.com/MikeMirzayanov/testlib",target:"_blank",rel:"noopener noreferrer"},G=s("MikeMirzayanov/testlib"),J=s("\u3002");function Y(D,F){const p=e("RouterLink"),t=e("ExternalLinkIcon");return i(),u("div",null,[r,n("p",null,[d,a(p,{to:"/zh/OI-wiki/tools/special-judge.html"},{default:o(()=>[m]),_:1}),v]),b,n("p",null,[h,a(p,{to:"/zh/OI-wiki/tools/testlib/general.html"},{default:o(()=>[f]),_:1}),g]),w,y,_,x,q,n("p",null,[I,n("a",j,[M,a(t)]),A]),C,n("ul",null,[z,E,L,n("li",null,[T,n("p",null,[n("strong",null,[S,n("a",N,[O,a(t)]),R,V,W,n("a",B,[G,a(t)]),J])])])])])}var K=l(k,[["render",Y],["__file","checker.html.vue"]]);export{K as default};
