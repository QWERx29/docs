import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c,a as n,b as p,e as t,d as s,r as l}from"./app.2d48c0a5.js";const i={},u=t(`<h1 id="\u5E38\u89C1\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#\u5E38\u89C1\u6280\u5DE7" aria-hidden="true">#</a> \u5E38\u89C1\u6280\u5DE7</h1><p>\u672C\u9875\u9762\u4E3B\u8981\u5217\u4E3E\u4E00\u4E9B\u7ADE\u8D5B\u4E2D\u7684\u5C0F\u6280\u5DE7\u3002</p><h2 id="\u5229\u7528\u5C40\u90E8\u6027" tabindex="-1"><a class="header-anchor" href="#\u5229\u7528\u5C40\u90E8\u6027" aria-hidden="true">#</a> \u5229\u7528\u5C40\u90E8\u6027</h2><p>\u5C40\u90E8\u6027\u662F\u6307\u7A0B\u5E8F\u503E\u5411\u4E8E\u5F15\u7528\u90BB\u8FD1\u4E8E\u5176\u4ED6\u6700\u8FD1\u5F15\u7528\u8FC7\u7684\u6570\u636E\u9879\u7684\u6570\u636E\u9879\uFF0C\u6216\u8005\u6700\u8FD1\u5F15\u7528\u8FC7\u7684\u6570\u636E\u9879\u672C\u8EAB\u3002\u5C40\u90E8\u6027\u5206\u4E3A\u65F6\u95F4\u5C40\u90E8\u6027\u548C\u7A7A\u95F4\u5C40\u90E8\u6027\u3002</p><ul><li>\u5FAA\u73AF\u5C55\u5F00\u3002\u901A\u8FC7\u9002\u5F53\u7684\u5FAA\u73AF\u5C55\u5F00\u53EF\u4EE5\u51CF\u5C11\u6574\u4E2A\u8BA1\u7B97\u4E2D\u5173\u952E\u8DEF\u5F84\u4E0A\u7684\u64CD\u4F5C\u6570\u91CF</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// for (int i = 0; i &lt; n; ++i) {</span>
<span class="token comment">//     res = res OP a[i];</span>
<span class="token comment">//}</span>
<span class="token comment">// \u4E0D\u5982</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res <span class="token operator">=</span> res OP a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> res OP a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res <span class="token operator">=</span> res OP a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u91CD\u65B0\u7ED3\u5408\u53D8\u6362\uFF0C\u589E\u52A0\u4E86\u53EF\u4EE5\u5E76\u884C\u6267\u884C\u7684\u8FD0\u7B97\u6570\u91CF\u3002</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u52A0\u53F7\u53EF\u4EE5\u6362\u6210\u5176\u4ED6\u7684\u8FD0\u7B97\u7B26</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// \u4E0D\u5982</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5FAA\u73AF\u5B8F\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5FAA\u73AF\u5B8F\u5B9A\u4E49" aria-hidden="true">#</a> \u5FAA\u73AF\u5B8F\u5B9A\u4E49</h2><p>\u5982\u4E0B\u4EE3\u7801\u53EF\u4F7F\u7528\u5B8F\u5B9A\u4E49\u7B80\u5316\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5FAA\u73AF\u5185\u5BB9\u7565</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u4F7F\u7528\u5B8F\u7B80\u5316</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">f</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> __ <span class="token operator">=</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> __<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span></span></span>

<span class="token comment">// \u8FD9\u6837\u5199\u5FAA\u73AF\u4EE3\u7801\u65F6\uFF0C\u5C31\u53EF\u4EE5\u7B80\u5316\u6210 \`f(i, 0, N)\` \u3002\u4F8B\u5982\uFF1A</span>
<span class="token comment">// a is a STL container</span>
<span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u5916\u63A8\u8350\u4E00\u4E2A\u6BD4\u8F83\u6709\u7528\u7684\u5B8F\u5B9A\u4E49\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u5584\u7528-namespace" tabindex="-1"><a class="header-anchor" href="#\u5584\u7528-namespace" aria-hidden="true">#</a> \u5584\u7528 namespace</h2><p>\u4F7F\u7528 namespace \u80FD\u4F7F\u7A0B\u5E8F\u53EF\u8BFB\u6027\u66F4\u597D\uFF0C\u4FBF\u4E8E\u8C03\u8BD5\u3002</p><details class="custom-container details"><summary>\u4F8B\u9898\uFF1ANOI 2018 \u5C60\u9F99\u52C7\u58EB</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// NOI 2018 \u5C60\u9F99\u52C7\u58EB 40\u5206\u90E8\u5206\u5206\u4EE3\u7801</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> aw<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> atk<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> one_game <span class="token punctuation">{</span>
<span class="token comment">// \u5176\u5B9Enamespace\u91CC\u4E5F\u53EF\u4EE5\u58F0\u660E\u53D8\u91CF</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> atk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> atk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>  <span class="token comment">// namespace one_game</span>

<span class="token keyword">namespace</span> p_1 <span class="token punctuation">{</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>atk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// solve 1-2</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// solve 3-4</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> k <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kt <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      k <span class="token operator">=</span> aw<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>kt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">ceil</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>  <span class="token comment">// namespace p_1</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> T<span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>aw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>aw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>atk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> aw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      one_game<span class="token double-colon punctuation">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// solve 8-13</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      p_1<span class="token double-colon punctuation">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// solve 1-4 or 14-15</span>
    <span class="token keyword">else</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="\u4F7F\u7528\u5B8F\u8FDB\u884C\u8C03\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u5B8F\u8FDB\u884C\u8C03\u8BD5" aria-hidden="true">#</a> \u4F7F\u7528\u5B8F\u8FDB\u884C\u8C03\u8BD5</h2><p>\u7F16\u7A0B\u8005\u5728\u672C\u5730\u6D4B\u8BD5\u7684\u65F6\u5019\uFF0C\u5F80\u5F80\u8981\u52A0\u5165\u4E00\u4E9B\u8C03\u8BD5\u8BED\u53E5\u3002\u800C\u5728\u9700\u8981\u63D0\u4EA4\u5230 OJ \u65F6\uFF0C\u4E3A\u4E86\u4E0D\u4F7F\u8C03\u8BD5\u8BED\u53E5\u7684\u8F93\u51FA\u5F71\u54CD\u5230\u7CFB\u7EDF\u5BF9\u7A0B\u5E8F\u8F93\u51FA\u7ED3\u679C\u7684\u5224\u65AD\uFF0C\u5C31\u8981\u628A\u5B83\u4EEC\u5168\u90E8\u5220\u9664\uFF0C\u8017\u65F6\u8F83\u591A\u3002\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u53EF\u4EE5\u901A\u8FC7\u5B9A\u4E49\u5B8F\u7684\u65B9\u5F0F\u6765\u8282\u7701\u65F6\u95F4\u3002\u5927\u81F4\u7684\u7A0B\u5E8F\u6846\u67B6\u662F\u8FD9\u6837\u7684\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
<span class="token comment">// do something when DEBUG is defined</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">// or</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DEBUG</span></span>
<span class="token comment">// do something when DEBUG isn&#39;t defined</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#ifdef</code> \u4F1A\u68C0\u67E5\u7A0B\u5E8F\u4E2D\u662F\u5426\u6709 <code>#define</code> \u5B9A\u4E49\u7684\u5BF9\u5E94\u6807\u8BC6\u7B26\uFF0C\u5982\u679C\u6709\u5B9A\u4E49\uFF0C\u5C31\u4F1A\u6267\u884C\u540E\u9762\u7684\u8BED\u53E5\u3002\u800C <code>#ifndef</code> \u4F1A\u5728\u6CA1\u6709\u5B9A\u4E49\u76F8\u5E94\u6807\u8BC6\u7B26\u7684\u60C5\u51B5\u4E0B\u6267\u884C\u540E\u9762\u7684\u8BED\u53E5\u3002</p><p>\u8FD9\u6837\uFF0C\u53EA\u9700\u5728 <code>#ifdef DEBUG</code> \u91CC\u5199\u597D\u8C03\u8BD5\u7528\u4EE3\u7801\uFF0C<code>#ifndef DEBUG</code> \u91CC\u5199\u597D\u771F\u6B63\u63D0\u4EA4\u7684\u4EE3\u7801\uFF0C\u5C31\u80FD\u65B9\u4FBF\u5730\u8FDB\u884C\u672C\u5730\u6D4B\u8BD5\u3002\u63D0\u4EA4\u7A0B\u5E8F\u7684\u65F6\u5019\uFF0C\u53EA\u9700\u8981\u5C06 <code>#define DEBUG</code> \u4E00\u884C\u6CE8\u91CA\u6389\u5373\u53EF\u3002\u4E5F\u53EF\u4EE5\u4E0D\u5728\u7A0B\u5E8F\u4E2D\u5B9A\u4E49\u6807\u8BC6\u7B26\uFF0C\u800C\u662F\u901A\u8FC7 <code>-DDEBUG</code> \u7684\u7F16\u8BD1\u9009\u9879\u5728\u7F16\u8BD1\u7684\u65F6\u5019\u5B9A\u4E49 <code>DEBUG</code> \u6807\u8BC6\u7B26\u3002\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u63D0\u4EA4\u7684\u65F6\u5019\u4E0D\u7528\u4FEE\u6539\u7A0B\u5E8F\u4E86\u3002</p><p>\u4E0D\u5C11 OJ \u90FD\u5F00\u542F\u4E86 <code>-DONLINE_JUDGE</code> \u8FD9\u4E00\u7F16\u8BD1\u9009\u9879\uFF0C\u5584\u7528\u8FD9\u4E00\u7279\u6027\u53EF\u4EE5\u8282\u7EA6\u4E0D\u5C11\u65F6\u95F4\u3002</p><h2 id="\u5BF9\u62CD" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u62CD" aria-hidden="true">#</a> \u5BF9\u62CD</h2><p>\u5BF9\u62CD\u662F\u4E00\u79CD\u8FDB\u884C\u68C0\u9A8C\u6216\u8C03\u8BD5\u7684\u65B9\u6CD5\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u4E24\u4E2A\u7A0B\u5E8F\u7684\u8F93\u51FA\u6765\u68C0\u9A8C\u7A0B\u5E8F\u7684\u6B63\u786E\u6027\u3002\u53EF\u4EE5\u5C06\u81EA\u5DF1\u7A0B\u5E8F\u7684\u8F93\u51FA\u4E0E\u5176\u4ED6\u7A0B\u5E8F\u7684\u8F93\u51FA\u8FDB\u884C\u5BF9\u6BD4\uFF0C\u4ECE\u800C\u5224\u65AD\u81EA\u5DF1\u7684\u7A0B\u5E8F\u662F\u5426\u6B63\u786E\u3002</p><p>\u5BF9\u62CD\u8FC7\u7A0B\u8981\u591A\u6B21\u8FDB\u884C\uFF0C\u56E0\u6B64\u9700\u8981\u901A\u8FC7\u6279\u5904\u7406\u7684\u65B9\u6CD5\u6765\u5B9E\u73B0\u5BF9\u62CD\u7684\u81EA\u52A8\u5316\u3002</p>`,25),k=s("\u5177\u4F53\u800C\u8A00\uFF0C\u5BF9\u62CD\u9700\u8981\u4E00\u4E2A "),r={href:"http://qwerx29.github.io/docs/OI-Wiki/tools/testlib/generator.html",target:"_blank",rel:"noopener noreferrer"},d=s("\u6570\u636E\u751F\u6210\u5668"),m=s(" \u548C\u4E24\u4E2A\u8981\u8FDB\u884C\u8F93\u51FA\u7ED3\u679C\u6BD4\u5BF9\u7684\u7A0B\u5E8F\u3002"),v=t(`<p>\u6BCF\u8FD0\u884C\u4E00\u6B21\u6570\u636E\u751F\u6210\u5668\u90FD\u5C06\u751F\u6210\u7684\u6570\u636E\u5199\u5165\u8F93\u5165\u6587\u4EF6\uFF0C\u901A\u8FC7\u91CD\u5B9A\u5411\u7684\u65B9\u6CD5\u4F7F\u4E24\u4E2A\u7A0B\u5E8F\u8BFB\u5165\u6570\u636E\uFF0C\u5E76\u5C06\u8F93\u51FA\u5199\u5165\u6307\u5B9A\u6587\u4EF6\uFF0C\u6700\u540E\u5229\u7528 Windows \u4E0B\u7684 <code>fc</code> \u547D\u4EE4\u6BD4\u5BF9\u6587\u4EF6\uFF08Linux \u4E0B\u4E3A <code>diff</code> \u547D\u4EE4\uFF09\u6765\u68C0\u9A8C\u7A0B\u5E8F\u7684\u6B63\u786E\u6027\u3002\u5982\u679C\u53D1\u73B0\u7A0B\u5E8F\u51FA\u9519\uFF0C\u53EF\u4EE5\u76F4\u63A5\u5229\u7528\u521A\u521A\u751F\u6210\u7684\u6570\u636E\u8FDB\u884C\u8C03\u8BD5\u3002</p><p>\u5BF9\u62CD\u7A0B\u5E8F\u7684\u5927\u81F4\u6846\u67B6\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// For Windows</span>
  <span class="token comment">// \u5BF9\u62CD\u65F6\u4E0D\u5F00\u6587\u4EF6\u8F93\u5165\u8F93\u51FA</span>
  <span class="token comment">// \u5F53\u7136\uFF0C\u8FD9\u6BB5\u7A0B\u5E8F\u4E5F\u53EF\u4EE5\u6539\u5199\u6210\u6279\u5904\u7406\u7684\u5F62\u5F0F</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;gen &gt; test.in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u6570\u636E\u751F\u6210\u5668\u5C06\u751F\u6210\u6570\u636E\u5199\u5165\u8F93\u5165\u6587\u4EF6</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;test1.exe &lt; test.in &gt; a.out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u83B7\u53D6\u7A0B\u5E8F1\u8F93\u51FA</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;test2.exe &lt; test.in &gt; b.out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u83B7\u53D6\u7A0B\u5E8F2\u8F93\u51FA</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;fc a.out b.out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8BE5\u884C\u8BED\u53E5\u6BD4\u5BF9\u8F93\u5165\u8F93\u51FA</span>
      <span class="token comment">// fc\u8FD4\u56DE0\u65F6\u8868\u793A\u8F93\u51FA\u4E00\u81F4\uFF0C\u5426\u5219\u8868\u793A\u6709\u4E0D\u540C\u5904</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u65B9\u4FBF\u67E5\u770B\u4E0D\u540C\u5904</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token comment">// \u8BE5\u8F93\u5165\u6570\u636E\u5DF2\u7ECF\u5B58\u653E\u5728test.in\u6587\u4EF6\u4E2D\uFF0C\u53EF\u4EE5\u76F4\u63A5\u5229\u7528\u8FDB\u884C\u8C03\u8BD5</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5185\u5B58\u6C60" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u6C60" aria-hidden="true">#</a> \u5185\u5B58\u6C60</h2><p>\u5F53\u52A8\u6001\u5206\u914D\u5185\u5B58\u65F6\uFF0C\u9891\u7E41\u4F7F\u7528 <code>new</code>/<code>malloc</code> \u4F1A\u5360\u7528\u5927\u91CF\u7684\u65F6\u95F4\u548C\u7A7A\u95F4\uFF0C\u751A\u81F3\u751F\u6210\u5927\u91CF\u7684\u5185\u5B58\u788E\u7247\u4ECE\u800C\u964D\u4F4E\u7A0B\u5E8F\u7684\u6027\u80FD\uFF0C\u53EF\u80FD\u4F1A\u4F7F\u539F\u672C\u6B63\u786E\u7684\u7A0B\u5E8F TLE/MLE\u3002</p><p>\u8FD9\u65F6\u5019\u9700\u8981\u4F7F\u7528\u5230\u201C\u5185\u5B58\u6C60\u201D\u8FD9\u79CD\u6280\u5DE7\uFF1A\u5728\u771F\u6B63\u4F7F\u7528\u5185\u5B58\u4E4B\u524D\uFF0C\u5148\u7533\u8BF7\u5206\u914D\u4E00\u5B9A\u5927\u5C0F\u7684\u5185\u5B58\u4F5C\u4E3A\u5907\u7528\u3002\u5F53\u9700\u8981\u52A8\u6001\u5206\u914D\u65F6\u76F4\u63A5\u4ECE\u5907\u7528\u5185\u5B58\u4E2D\u5206\u914D\u4E00\u5757\u5373\u53EF\u3002</p><p>\u5728\u5927\u591A\u6570 OI \u9898\u5F53\u4E2D\uFF0C\u53EF\u4EE5\u9884\u5148\u7B97\u51FA\u9700\u8981\u4F7F\u7528\u5230\u7684\u6700\u5927\u5185\u5B58\u5E76\u4E00\u6B21\u6027\u7533\u8BF7\u5206\u914D\u3002</p><p>\u793A\u4F8B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u7533\u8BF7\u52A8\u6001\u5206\u914D 32 \u4F4D\u6709\u7B26\u53F7\u6574\u6570\u6570\u7EC4\uFF1A</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">newarr</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> pool<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>allocp <span class="token operator">=</span> pool<span class="token punctuation">;</span>
  <span class="token keyword">return</span> allocp <span class="token operator">+=</span> sz<span class="token punctuation">,</span> allocp <span class="token operator">-</span> sz<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u7EBF\u6BB5\u6811\u52A8\u6001\u5F00\u70B9\u7684\u4EE3\u7801\uFF1A</span>
<span class="token keyword">inline</span> Node<span class="token operator">*</span> <span class="token function">newnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> Node pool<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>allocp <span class="token operator">=</span> pool <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">++</span>allocp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u8D44\u6599" aria-hidden="true">#</a> \u53C2\u8003\u8D44\u6599</h2>`,10),b={href:"https://studyingfather.blog.luogu.org/some-coding-tips-for-oiers",target:"_blank",rel:"noopener noreferrer"},h=s("\u6D1B\u8C37\u65E5\u62A5 #86"),y=n("p",null,"\u300A\u7B97\u6CD5\u7ADE\u8D5B\u5165\u95E8\u7ECF\u5178 \u4E60\u9898\u4E0E\u89E3\u7B54\u300B",-1);function f(w,g){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[k,n("a",r,[d,p(a)]),m]),v,n("p",null,[n("a",b,[h,p(a)])]),y])}var E=e(i,[["render",f],["__file","common-tricks.html.vue"]]);export{E as default};
