import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{o as l,c as u,a as n,b as a,w as e,e as p,d as s,r as c}from"./app.6d7cb999.js";const r={},k=p('<h1 id="special-judge" tabindex="-1"><a class="header-anchor" href="#special-judge" aria-hidden="true">#</a> Special Judge</h1><p>\u672C\u9875\u9762\u4E3B\u8981\u4ECB\u7ECD\u90E8\u5206\u8BC4\u6D4B\u5DE5\u5177/OJ \u7684 spj \u7F16\u5199\u65B9\u6CD5\u3002</p><h2 id="\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u7B80\u4ECB" aria-hidden="true">#</a> \u7B80\u4ECB</h2><p><strong>Special Judge</strong>\uFF08\u7B80\u79F0\uFF1Aspj\uFF0C\u522B\u540D\uFF1Achecker\uFF09\u662F\u5F53\u4E00\u9053\u9898\u6709\u591A\u7EC4\u89E3\u65F6\uFF0C\u7528\u6765\u5224\u65AD\u7B54\u6848\u5408\u6CD5\u6027\u7684\u7A0B\u5E8F\u3002</p><div class="custom-container warning"><p class="custom-container-title">\u6CE8\u610F</p><p>\u200B spj \u8FD8\u5E94\u5F53\u5224\u65AD\u6587\u4EF6\u5C3E\u662F\u5426\u6709\u591A\u4F59\u5185\u5BB9\uFF0C\u53CA\u8F93\u51FA\u683C\u5F0F\u662F\u5426\u6B63\u786E\uFF08\u5982\u9898\u76EE\u8981\u6C42\u6570\u5B57\u95F4\u7528\u4E00\u4E2A\u7A7A\u683C\u9694\u5F00\uFF0C\u800C\u9009\u624B\u5374\u4F7F\u7528\u4E86\u6362\u884C\uFF09\u3002\u4F46\u662F\uFF0C\u76EE\u524D\u524D\u8005\u53EA\u6709 Testlib \u53EF\u4EE5\u65B9\u4FBF\u5730\u505A\u5230\u8FD9\u4E00\u70B9\uFF0C\u800C\u540E\u8005\u51E0\u4E4E\u65E0\u4EBA\u53BB\u7279\u610F\u8FDB\u884C\u8FD9\u79CD\u5224\u65AD\u3002</p><p>\u200B \u5224\u65AD\u6D6E\u70B9\u6570\u65F6\u5E94\u6CE8\u610F NaN\u3002\u4E0D\u5408\u7406\u7684\u5224\u65AD\u65B9\u5F0F\u4F1A\u5BFC\u81F4\u8F93\u51FA NaN \u5373\u53EF AC \u7684\u60C5\u51B5\u3002</p><p>\u200B \u5728\u5BF9\u9009\u624B\u6587\u4EF6\u8FDB\u884C\u8BFB\u5165\u64CD\u4F5C\u65F6\u5E94\u8BE5\u8981\u68C0\u67E5\u662F\u5426\u6B63\u786E\u8BFB\u5165\u4E86\u6240\u9700\u7684\u5185\u5BB9\uFF0C\u9632\u6B62\u9020\u6210 spj \u7684\u8FD0\u884C\u9519\u8BEF\u3002\uFF08\u90E8\u5206 OJ \u4F1A\u5C06 spj \u7684\u8FD0\u884C\u9519\u8BEF\u4F5C\u4E3A\u7CFB\u7EDF\u9519\u8BEF\u5904\u7406\uFF09</p></div><div class="custom-container note"><p class="custom-container-title">\u6CE8</p><p>\u200B \u4EE5\u4E0B\u5747\u4EE5 C++ \u4F5C\u4E3A\u7F16\u7A0B\u8BED\u8A00\uFF0C\u4EE5\u201C\u8981\u6C42\u6807\u51C6\u7B54\u6848\u4E0E\u9009\u624B\u7B54\u6848\u5DEE\u503C\u5C0F\u4E8E 1e-3\uFF0C\u6587\u4EF6\u540D\u4E3A num\uFF0C\u5355\u4E2A\u6D4B\u8BD5\u70B9\u6EE1\u5206\u4E3A 10 \u5206\u201D\u4E3A\u4F8B\u3002</p></div><h2 id="testlib" tabindex="-1"><a class="header-anchor" href="#testlib" aria-hidden="true">#</a> Testlib</h2>',7),d=s("\u53C2\u89C1\uFF1A"),v=s("Testlib/\u7B80\u4ECB"),m=s("\uFF0C"),b=s("Testlib/Checker"),f=n("p",null,"Testlib \u662F\u4E00\u4E2A C++ \u7684\u5E93\uFF0C\u7528\u4E8E\u8F85\u52A9\u51FA\u9898\u4EBA\u4F7F\u7528 C++ \u7F16\u5199\u7B97\u6CD5\u7ADE\u8D5B\u9898\u3002",-1),h=n("p",null,"\u5FC5\u987B\u4F7F\u7528 Testlib \u4F5C\u4E3A spj \u7684 \u8BC4\u6D4B\u5DE5\u5177/OJ\uFF1ACodeforces\u3001\u6D1B\u8C37\u3001UOJ \u7B49\u3002",-1),g=s("\u53EF\u4EE5\u4F7F\u7528 Testlib \u4F5C\u4E3A spj \u7684 \u8BC4\u6D4B\u5DE5\u5177/OJ\uFF1ALibreOJ ("),_={href:"https://github.com/lyrio-dev",target:"_blank",rel:"noopener noreferrer"},q=s("Lyrio"),y=s(")\u3001Lemon\u3001\u725B\u5BA2\u7F51\u7B49\u3002"),w=s("SYZOJ 2 \u6240\u9700\u7684\u4FEE\u6539\u7248 Testlib \u6258\u7BA1\u4E8E "),j={href:"https://pastebin.com/3GANXMG7",target:"_blank",rel:"noopener noreferrer"},x=s("pastebin"),L=n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote1"},"[1]"),n("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),E=s("\u3002"),T=s("Lemon \u6240\u9700\u7684\u4FEE\u6539\u7248 Testlib \u6258\u7BA1\u4E8E "),I={href:"https://github.com/GitPinkRabbit/Testlib-for-Lemons",target:"_blank",rel:"noopener noreferrer"},F=s("GitHub - GitPinkRabbit/Testlib-for-Lemons"),J=s("\u3002\u6CE8\u610F\u6B64\u7248\u672C Testlib \u6CE8\u518C checker \u65F6\u5E94\u4F7F\u7528 "),O=n("code",null,"registerLemonChecker()",-1),C=s("\uFF0C\u800C\u975E "),A=n("code",null,"registerTestlibCmd()",-1),G=s("\u3002\u6B64\u7248\u672C\u7EE7\u627F\u81EA "),N={href:"https://paste.ubuntu.com/p/JsTspHHnmB/",target:"_blank",rel:"noopener noreferrer"},D=s("matthew99 \u7684\u65E7\u7248"),M=s("\uFF0C\u6DFB\u52A0\u4E86\u4E00\u4E9B Testlib \u7684\u65B0\u529F\u80FD\u3002"),S=s("DOMJudge \u6240\u9700\u7684\u4FEE\u6539\u7248 Testlib \u6258\u7BA1\u4E8E "),R={href:"https://github.com/cn-xcpc-tools/testlib-for-domjudge",target:"_blank",rel:"noopener noreferrer"},W=s("cn-xcpc-tools/testlib-for-domjudge"),z=s("\u3002\u6B64\u7248\u672C Testlib \u540C\u65F6\u53EF\u4F5C\u4E3A Special Judge \u7684 checker \u548C\u4EA4\u4E92\u9898\u7684 interactor\u3002"),B=p(`<p>\u5176\u4ED6\u8BC4\u6D4B\u5DE5\u5177/OJ \u5927\u90E8\u5206\u9700\u8981\u6309\u7167\u5176 spj \u7F16\u5199\u683C\u5F0F\u4FEE\u6539 Testlib\uFF0C\u5E76\u5C06 testlib.h \u4E0E spj \u4E00\u540C\u4E0A\u4F20\uFF1B\u6216\u5C06 testlib.h \u7F6E\u4E8E include \u76EE\u5F55\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// clang-format off</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;testlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * inf\uFF1A\u8F93\u5165
   * ouf\uFF1A\u9009\u624B\u8F93\u51FA
   * ans\uFF1A\u6807\u51C6\u8F93\u51FA
   */</span>
  <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans <span class="token operator">=</span> ouf<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jans <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_ok<span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">quitf</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span> pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lemon" tabindex="-1"><a class="header-anchor" href="#lemon" aria-hidden="true">#</a> Lemon</h2><div class="custom-container note"><p class="custom-container-title">\u6CE8</p><p>\u200B Lemon \u6709\u73B0\u6210\u7684\u4FEE\u6539\u7248 <a href="#testlib">Testlib</a>\uFF0C\u5EFA\u8BAE\u4F7F\u7528 Testlib\u3002</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * argv[1]\uFF1A\u8F93\u5165
   * argv[2]\uFF1A\u9009\u624B\u8F93\u51FA
   * argv[3]\uFF1A\u6807\u51C6\u8F93\u51FA
   * argv[4]\uFF1A\u5355\u4E2A\u6D4B\u8BD5\u70B9\u5206\u503C
   * argv[5]\uFF1A\u8F93\u51FA\u6700\u7EC8\u5F97\u5206 (0 ~ argv[4])
   * argv[6]\uFF1A\u8F93\u51FA\u9519\u8BEF\u62A5\u544A
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fscore <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> freport <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
            pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cena" tabindex="-1"><a class="header-anchor" href="#cena" aria-hidden="true">#</a> Cena</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * FILENAME.in\uFF1A\u8F93\u5165
   * FILENAME.out\uFF1A\u9009\u624B\u8F93\u51FA
   * argv[1]\uFF1A\u5355\u4E2A\u6D4B\u8BD5\u70B9\u5206\u503C
   * argv[2]\uFF1A\u6807\u51C6\u8F93\u51FA
   * score.log\uFF1A\u8F93\u51FA\u6700\u7EC8\u5F97\u5206 (0 ~ argv[1])
   * report.log\uFF1A\u8F93\u51FA\u9519\u8BEF\u62A5\u544A
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;num.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;num.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fscore <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;score.log&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> freport <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;report.log&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
            pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ccr" tabindex="-1"><a class="header-anchor" href="#ccr" aria-hidden="true">#</a> CCR</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * stdin\uFF1A\u8F93\u5165
   * argv[2]\uFF1A\u6807\u51C6\u8F93\u51FA
   * argv[3]\uFF1A\u9009\u624B\u8F93\u51FA
   * stdout:L1\uFF1A\u8F93\u51FA\u6700\u7EC8\u5F97\u5206\u6BD4\u7387 (0 ~ 1)
   * stdout:L2\uFF1A\u8F93\u51FA\u9519\u8BEF\u62A5\u544A
   */</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span> pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arbiter" tabindex="-1"><a class="header-anchor" href="#arbiter" aria-hidden="true">#</a> Arbiter</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * argv[1]\uFF1A\u8F93\u5165
   * argv[2]\uFF1A\u9009\u624B\u8F93\u51FA
   * argv[3]\uFF1A\u6807\u51C6\u8F93\u51FA
   * /tmp/_eval.score:L1\uFF1A\u8F93\u51FA\u9519\u8BEF\u62A5\u544A
   * /tmp/_eval.score:L2\uFF1A\u8F93\u51FA\u6700\u7EC8\u5F97\u5206
   */</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fscore <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/_eval.score&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
            pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fscore<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hustoj" tabindex="-1"><a class="header-anchor" href="#hustoj" aria-hidden="true">#</a> HUSTOJ</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AC</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WA</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * argv[1]\uFF1A\u8F93\u5165
   * argv[2]\uFF1A\u6807\u51C6\u8F93\u51FA
   * argv[3]\uFF1A\u9009\u624B\u8F93\u51FA
   * exit code\uFF1A\u8FD4\u56DE\u5224\u65AD\u7ED3\u679C
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> AC<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> WA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qduoj" tabindex="-1"><a class="header-anchor" href="#qduoj" aria-hidden="true">#</a> QDUOJ</h2><p>\u76F8\u8F83\u4E4B\u4E0B\uFF0CQDUOJ \u7565\u4E3A\u9EBB\u70E6\u3002\u5B83\u5E26 spj \u7684\u9898\u76EE\u6CA1\u6709\u6807\u51C6\u8F93\u51FA\uFF0C\u53EA\u80FD\u628A std \u5199\u8FDB spj\uFF0C\u5F85\u8DD1\u51FA\u6807\u51C6\u8F93\u51FA\u540E\u518D\u5224\u65AD\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AC</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WA</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span>

<span class="token keyword">double</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// std</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * argv[1]\uFF1A\u8F93\u5165
   * argv[2]\uFF1A\u9009\u624B\u8F93\u51FA
   * exit code\uFF1A\u8FD4\u56DE\u5224\u65AD\u7ED3\u679C
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  jans <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> AC<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> WA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="libreoj-syzoj-2" tabindex="-1"><a class="header-anchor" href="#libreoj-syzoj-2" aria-hidden="true">#</a> LibreOJ (SYZOJ 2)</h2><div class="custom-container note"><p class="custom-container-title">\u6CE8</p><pre><code>LibreOJ (SYZOJ 2) \u6709\u73B0\u6210\u7684\u4FEE\u6539\u7248 [Testlib](#testlib)\uFF0C\u5EFA\u8BAE\u4F7F\u7528 Testlib\u3002
</code></pre></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * in\uFF1A\u8F93\u5165
   * user_out\uFF1A\u9009\u624B\u8F93\u51FA
   * answer\uFF1A\u6807\u51C6\u8F93\u51FA
   * code\uFF1A\u9009\u624B\u4EE3\u7801
   * stdout\uFF1A\u8F93\u51FA\u6700\u7EC8\u5F97\u5206 (0 ~ 100)
   * stderr\uFF1A\u8F93\u51FA\u9519\u8BEF\u62A5\u544A
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;user_out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;answer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fcode <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
            pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u725B\u5BA2\u7F51" tabindex="-1"><a class="header-anchor" href="#\u725B\u5BA2\u7F51" aria-hidden="true">#</a> \u725B\u5BA2\u7F51</h2><div class="custom-container note"><p class="custom-container-title">\u6CE8</p><pre><code>\u725B\u5BA2\u7F51\u6709\u73B0\u6210\u7684\u4FEE\u6539\u7248 [Testlib](#testlib)\uFF0C\u5EFA\u8BAE\u4F7F\u7528 Testlib\u3002
</code></pre></div>`,21),H=s("\u53C2\u89C1\uFF1A"),P={href:"https://www.nowcoder.com/discuss/84666",target:"_blank",rel:"noopener noreferrer"},U=s("\u5982\u4F55\u5728\u725B\u5BA2\u7F51\u51FA Special Judge \u7684\u7F16\u7A0B\u9898"),V=p(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AC</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WA</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * input\uFF1A\u8F93\u5165
   * user_output\uFF1A\u9009\u624B\u8F93\u51FA
   * output\uFF1A\u6807\u51C6\u8F93\u51FA
   * exit code\uFF1A\u8FD4\u56DE\u5224\u65AD\u7ED3\u679C
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fout <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;user_output&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> AC<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> WA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="domjudge" tabindex="-1"><a class="header-anchor" href="#domjudge" aria-hidden="true">#</a> DOMJudge</h2>`,2),K={class:"custom-container note"},Y=n("p",{class:"custom-container-title"},"\u6CE8",-1),Z=s("\u200B DOMJudge \u652F\u6301\u4EFB\u4F55\u8BED\u8A00\u7F16\u5199\u7684 spj\uFF0C\u53C2\u89C1\uFF1A"),Q={href:"https://www.problemarchive.org/wiki/index.php/Output_validator",target:"_blank",rel:"noopener noreferrer"},X=s("problemarchive.org output validator \u683C\u5F0F"),$=s("\u3002"),nn=n("p",null,[s("\u200B DOMJudge \u6709\u73B0\u6210\u7684\u4FEE\u6539\u7248 "),n("a",{href:"#testlib"},"Testlib"),s("\uFF0C\u5EFA\u8BAE\u4F7F\u7528 Testlib\u3002")],-1),sn=s("DOMJudge \u4F7F\u7528\u7684 Testlib \u53CA\u5BFC\u5165 Polygon \u9898\u76EE\u5305\u65B9\u5F0F\u7684\u6587\u6863\uFF1A"),an={href:"https://github.com/cn-xcpc-tools/testlib-for-domjudge",target:"_blank",rel:"noopener noreferrer"},tn=s("https://github.com/cn-xcpc-tools/testlib-for-domjudge"),pn=s("DOMJudge \u7684 "),on={href:"https://github.com/Kattis/problemtools/blob/master/support/default_validator/",target:"_blank",rel:"noopener noreferrer"},en=s("\u9ED8\u8BA4\u6BD4\u8F83\u5668"),cn=s(" \u81EA\u5E26\u4E86\u6D6E\u70B9\u6570\u5E26\u7CBE\u5EA6\u6BD4\u8F83\uFF0C\u53EA\u9700\u8981\u5728\u9898\u76EE\u914D\u7F6E\u7684 "),ln=n("code",null,"validator_flags",-1),un=s(" \u4E2D\u6DFB\u52A0 "),rn=n("code",null,"float_tolerance 1e-3",-1),kn=s(" \u5373\u53EF\u3002"),dn=p(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AC</span> <span class="token expression"><span class="token number">42</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WA</span> <span class="token expression"><span class="token number">43</span></span></span>
<span class="token keyword">char</span> reportfile<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * argv[1]: \u8F93\u5165
   * argv[2]: \u6807\u51C6\u8F93\u51FA
   * argv[3]: \u8BC4\u6D4B\u4FE1\u606F\u8F93\u51FA\u7684\u6587\u4EF6\u5939
   * stdin: \u9009\u624B\u8F93\u51FA
   */</span>
  FILE<span class="token operator">*</span> fin <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> fstd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sprintf</span><span class="token punctuation">(</span>reportfile<span class="token punctuation">,</span> <span class="token string">&quot;%s/judgemessage.txt&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  FILE<span class="token operator">*</span> freport <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>reportfile<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> pans<span class="token punctuation">,</span> jans<span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>fstd<span class="token punctuation">,</span> <span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jans<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pans <span class="token operator">-</span> jans<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Good job\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> AC<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>freport<span class="token punctuation">,</span> <span class="token string">&quot;Too big or too small, expected %f, found %f\\n&quot;</span><span class="token punctuation">,</span> jans<span class="token punctuation">,</span>
            pans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> WA<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vn=s("\u4E5F\u53EF\u4EE5\u4F7F\u7528 Kattis Problem Tools \u63D0\u4F9B\u7684\u5934\u6587\u4EF6 "),mn={href:"https://github.com/Kattis/problemtools/blob/master/examples/different/output_validators/different_validator/validate.h",target:"_blank",rel:"noopener noreferrer"},bn=s("validate.h"),fn=s(" \u7F16\u5199\uFF0C\u4EE5\u5B9E\u73B0\u66F4\u52A0\u590D\u6742\u7684\u529F\u80FD\u3002"),hn=n("h2",{id:"\u53C2\u8003\u8D44\u6599",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53C2\u8003\u8D44\u6599","aria-hidden":"true"},"#"),s(" \u53C2\u8003\u8D44\u6599")],-1),gn=n("hr",{class:"footnotes-sep"},null,-1),_n={class:"footnotes"},qn={class:"footnotes-list"},yn={id:"footnote1",class:"footnote-item"},wn={href:"https://loj.ac/article/124",target:"_blank",rel:"noopener noreferrer"},jn=s("LibreOJ \u652F\u6301 testlib \u68C0\u67E5\u5668\u5566\uFF01"),xn=s(),Ln=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1);function En(Tn,In){const o=c("RouterLink"),t=c("ExternalLinkIcon");return l(),u("div",null,[k,n("p",null,[d,a(o,{to:"/zh/OI-wiki/tools/testlib/"},{default:e(()=>[v]),_:1}),m,a(o,{to:"/zh/OI-wiki/tools/testlib/checker.html"},{default:e(()=>[b]),_:1})]),f,h,n("p",null,[g,n("a",_,[q,a(t)]),y]),n("p",null,[w,n("a",j,[x,a(t)]),L,E]),n("p",null,[T,n("a",I,[F,a(t)]),J,O,C,A,G,n("a",N,[D,a(t)]),M]),n("p",null,[S,n("a",R,[W,a(t)]),z]),B,n("p",null,[H,n("a",P,[U,a(t)])]),V,n("div",K,[Y,n("p",null,[Z,n("a",Q,[X,a(t)]),$]),nn]),n("p",null,[sn,n("a",an,[tn,a(t)])]),n("p",null,[pn,n("a",on,[en,a(t)]),cn,ln,un,rn,kn]),dn,n("p",null,[vn,n("a",mn,[bn,a(t)]),fn]),hn,gn,n("section",_n,[n("ol",qn,[n("li",yn,[n("p",null,[n("a",wn,[jn,a(t)]),xn,Ln])])])])])}var On=i(r,[["render",En],["__file","special-judge.html.vue"]]);export{On as default};
