import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c,a as n,b as p,d as s,e as t,r as l}from"./app.073805c3.js";const u={},i=n("h1",{id:"\u4EA4\u4E92\u9898",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u4EA4\u4E92\u9898","aria-hidden":"true"},"#"),s(" \u4EA4\u4E92\u9898")],-1),k=n("p",null,"\u4E0A\u4E2A\u4E16\u7EAA\u7684 IOI \u5C31\u5DF2\u6D89\u53CA\u4EA4\u4E92\u9898\u3002\u867D\u7136\u4EA4\u4E92\u9898\u8FD1\u5E74\u6765\u6CA1\u6709\u5728\u7701\u9009\u4EE5\u4E0B\u7684\u6BD4\u8D5B\u4E2D\u51FA\u73B0\uFF0C\u4E0D\u8FC7 2019 \u5E74\u91CC NOI \u7CFB\u5217\u6BD4\u8D5B\u4E2D\u8FDE\u7EED\u51FA\u73B0\u300AP5208[WC2019]I \u541B\u7684\u5546\u5E97\u300B\u3001\u300AP5473[NOI2019]I \u541B\u7684\u63A2\u9669\u300B\u4E24\u9053\u4EA4\u4E92\u9898\uFF0C\u8FD9\u53EF\u80FD\u4EE3\u8868\u7740\u4EA4\u4E92\u9898\u91CD\u65B0\u56DE\u5230 NOI \u7CFB\u5217\u6BD4\u8D5B\u4E2D\u3002",-1),r=s("\u4EA4\u4E92\u9898\u6CA1\u6709\u5F88\u9AD8\u7684\u524D\u7F6E\u7B97\u6CD5\u8981\u6C42\uFF0C\u4E00\u822C\u4E5F\u6CA1\u6709\u4E25\u683C\u7684\u65F6\u95F4\u9650\u5236\uFF0C\u7A0B\u5E8F\u7684\u4F18\u79C0\u7A0B\u5EA6\u5F80\u5F80\u4EC5\u53D6\u51B3\u4E8E\u4EA4\u4E92\u6B21\u6570\u9650\u5236\u3002\u6240\u4EE5\u5B66\u4E60\u4EA4\u4E92\u9898\u65F6\uFF0C\u5EFA\u8BAE\u6309\u7167\u96BE\u5EA6\u5FAA\u5E8F\u6E10\u8FDB\u3002\u8981\u662F\u6709\u610F\u953B\u70BC\u7B97\u6CD5\u601D\u7EF4\u800C\u4E0D\u53EA\u662F\u5355\u7EAF\u5730\u5B66\u4E60\u7B97\u6CD5\uFF0C\u90A3\u4E48\u5B8C\u6210\u4EA4\u4E92\u9898\u662F\u5F88\u4E0D\u9519\u7684\u65B9\u6CD5\u3002\u867D\u7136\u4EA4\u4E92\u9898\u5BF9\u9009\u624B\u5DF2\u638C\u63E1\u7B97\u6CD5\u7684\u8981\u6C42\u901A\u5E38\u8F83\u4F4E\uFF0C\u4F46\u4ECD\u5EFA\u8BAE\u638C\u63E1\u4E00\u5B9A\u63D0\u9AD8\u548C\u7701\u9009\u7B97\u6CD5\u540E\u518D\u5C1D\u8BD5\u505A\u4EA4\u4E92\u9898\uFF0C\u56E0\u4E3A\u6B64\u65F6\u81EA\u5DF1\u7684\u7B97\u6CD5\u601D\u7EF4\u6C34\u5E73\u548C\u77E5\u8BC6\u9762\u5DF2\u7ECF\u8FBE\u5230\u4E86\u4E00\u5B9A\u6C34\u5E73\u3002\u57FA\u7840\u7684\u4EA4\u4E92\u9898\u4ECB\u7ECD\u53EF\u4EE5\u53C2\u8003 OI wiki \u7684 "),d={href:"https://oi-wiki.org/contest/problems/#interaction",target:"_blank",rel:"noopener noreferrer"},v=s("\u9898\u578B\u4ECB\u7ECD - \u4EA4\u4E92\u9898"),m=s("\u3002"),b=n("p",null,"\u4EA4\u4E92\u9898\u7684\u7279\u6B8A\u9519\u8BEF\uFF1A",-1),f=n("ul",null,[n("li",null,"\u9009\u624B\u6BCF\u4E00\u6B21\u8F93\u51FA\u540E\u90FD\u9700\u8981\u5237\u65B0\u7F13\u51B2\u533A\uFF0C\u5426\u5219\u4F1A\u5F15\u8D77 Idleness limit exceeded \u9519\u8BEF\u3002\u53E6\u5916\uFF0C\u5982\u679C\u9898\u76EE\u542B\u591A\u7EC4\u6570\u636E\u5E76\u4E14\u7A0B\u5E8F\u53EF\u4EE5\u5728\u672A\u8BFB\u5165\u6240\u6709\u6570\u636E\u524D\u5C31\u77E5\u9053\u7B54\u6848\uFF0C\u4E5F\u4ECD\u7136\u8981\u8BFB\u5165\u6240\u6709\u6570\u636E\uFF0C\u5426\u5219\u540C\u6837\u4F1A\u56E0\u4E3A\u8BFB\u5165\u6DF7\u4E71\u5F15\u8D77 ILE\uFF08\u53EF\u4EE5\u4E00\u6B21\u63D0\u51FA\u591A\u6B21\u8BE2\u95EE\uFF0C\u4E00\u6B21\u63A5\u6536\u6240\u6709\u8BE2\u95EE\u7684\u56DE\u7B54\uFF09\u3002\u540C\u65F6\u5C3D\u91CF\u4E0D\u8981\u4F7F\u7528\u5FEB\u8BFB\u3002"),n("li",null,"\u5982\u679C\u7A0B\u5E8F\u67E5\u8BE2\u6B21\u6570\u8FC7\u591A\uFF0C\u5219\u5728 Codeforces \u4E0A\u4F1A\u7ED9\u51FA Wrong Answer \u7684\u8BC4\u6D4B\u7ED3\u679C\uFF08\u4E0D\u8FC7\u8BC4\u6D4B\u7CFB\u7EDF\u4F1A\u8BF4\u660E Wrong Answer \u7684\u539F\u56E0\uFF09\uFF0C\u800C UVA \u4F1A\u7ED9\u51FA Protocol Limit Exceeded (PLE) \u7684\u8BC4\u6D4B\u7ED3\u679C\u3002"),n("li",null,"\u5982\u679C\u7A0B\u5E8F\u4EA4\u4E92\u683C\u5F0F\u9519\u8BEF\uFF0CUVa \u4F1A\u7ED9\u51FA Protocol Violation (PV) \u7684\u8BC4\u6D4B\u7ED3\u679C\u3002")],-1),w=n("p",null,"\u7531\u4E8E\u4EA4\u4E92\u9898\u8F93\u5165\u8F93\u51FA\u8F83\u4E3A\u7E41\u7410\uFF0C\u6240\u4EE5\u5EFA\u8BAE\u5206\u522B\u5C01\u88C5\u8F93\u5165\u548C\u8F93\u51FA\u51FD\u6570\u3002",-1),y=n("p",null,[s("\u6BD4\u8D5B\u65F6\u5982\u679C\u51FA\u9898\u4EBA\u7ED9\u51FA\u4E86 grader \u5934\u6587\u4EF6\uFF08\u7528\u4E8E grader \u4EA4\u4E92\u9898\u7684\u8C03\u8BD5\uFF09\u6216\u8005 checker \u7A0B\u5E8F\uFF08\u7528\u4E8E stdio \u4EA4\u4E92\u9898\u7684\u8C03\u8BD5\uFF09\uFF0C\u5219\u4EA4\u4E92\u9898\u7684\u8C03\u8BD5\u6BD4\u8F83\u7B80\u5355\uFF0C\u56E0\u4E3A\u4EA4\u4E92\u9898\u7684\u5BF9\u62CD\u4F1A\u6BD4\u666E\u901A\u9898\u76EE\u7684\u5BF9\u62CD\u56F0\u96BE\u5F88\u591A\u3002\u6CA1\u6709 "),n("code",null,"testlib.h"),s(" \u7684\u60C5\u51B5\u4E0B\u3002\u4EA4\u4E92\u7EC6\u8282\u8F83\u591A\u7684\u9898\u76EE\u7684 stdio \u4EA4\u4E92\u5E93\u4F1A\u4E00\u822C\u6709 3k \u4EE3\u7801\u91CF\uFF0C\u518D\u52A0\u4E0A 3k \u957F\u5EA6\u7684\u5BF9\u62CD\u5668\uFF0C\u81F3\u5C11\u9700\u8981\u4E00\u5C0F\u65F6\u5B9E\u73B0\u3002\u4F46\u662F\uFF0C\u65E0\u8BBA\u662F\u5426\u6709\u8C03\u8BD5\u7A0B\u5E8F\uFF0C\u8C03\u8BD5\u4EA4\u4E92\u9898\u7684\u4EE3\u7801\u90FD\u5F80\u5F80\u9700\u8981\u9009\u624B\u6A21\u62DF\u4E0E\u7A0B\u5E8F\u7684\u4EA4\u4E92\u8FC7\u7A0B\uFF0C\u56E0\u6B64\u4EA4\u4E92\u9898\u9700\u8981\u9009\u624B\u80FD\u8BBE\u8BA1\u51FA\u9AD8\u8D28\u91CF\u7684\u7A0B\u5E8F\uFF0C\u5C3D\u91CF\u4FDD\u8BC1\u4E00\u904D\u505A\u5BF9\uFF0C\u540C\u65F6\u62E5\u6709\u8F83\u5F3A\u7684\u9759\u6001\u67E5\u9519\u80FD\u529B\u3002")],-1),h=n("p",null,"\u4F8B\u9898\uFF1A",-1),_={href:"https://www.luogu.com.cn/problem/CF679A",target:"_blank",rel:"noopener noreferrer"},g=s("CF679A Bear and Prime 100"),x={href:"https://www.luogu.com.cn/problem/CF843B",target:"_blank",rel:"noopener noreferrer"},q=s("CF843B Interactive LowerBound"),j={href:"http://uoj.ac/problem/206",target:"_blank",rel:"noopener noreferrer"},N=s("UOJ206[APIO2016]Gap"),P={href:"https://www.luogu.com.cn/problem/CF750F",target:"_blank",rel:"noopener noreferrer"},I=s("CF750F New Year and Finding Roots"),U={href:"https://www.luogu.com.cn/problem/UVA12731",target:"_blank",rel:"noopener noreferrer"},z=s("UVA12731 \u592A\u7A7A\u7AD9\u4E4B\u8C1C Mysterious Space Station"),O=t(`<h2 id="cf679a-bear-and-prime-100" tabindex="-1"><a class="header-anchor" href="#cf679a-bear-and-prime-100" aria-hidden="true">#</a> CF679A Bear and Prime 100</h2><p>\u6BCF\u4E2A\u8D28\u6570\u90FD\u6709\u4E14\u53EA\u6709\u4E24\u4E2A\u56E0\u6570\uFF0C\u6240\u4EE5\u76F4\u63A5\u679A\u4E3E\u8981\u731C\u7684\u6570\u7684\u56E0\u6570\u3002\u7531\u4E8E\u9650\u5236\u6700\u591A\u8BE2\u95EE 20 \u6B21\uFF0C\u5E76\u4E14\u5BF9\u4E8E\u8F83\u5927\u7684\u6570\uFF08\u5982 92\uFF09\u5C1D\u8BD5\u5206\u89E3\u8D28\u56E0\u6570\u65F6\u53D1\u73B0\u9700\u8981\u6700\u591A\u679A\u4E3E\u5230 \u7684\u8D28\u6570\u3002\u6240\u4EE5\u6211\u4EEC\u5148\u7B5B\u51FA 50 \u4EE5\u5185\u7684\u8D28\u6570\uFF0C\u6BCF\u6B21\u628A\u6240\u6709\u8FD9\u4E9B\u6570\u90FD\u8BE2\u95EE\u4E00\u904D\u3002</p><p>\u7531\u4E8E\u672C\u9898\u5BF9\u62CD\u6BD4\u8F83\u5BB9\u6613\uFF0C\u53EF\u4EE5\u76F4\u63A5\u628A\u503C\u57DF\u5185\u7684\u6570\u90FD\u5C1D\u8BD5\u4E00\u904D\u3002\u6211\u4EEC\u4F1A\u53D1\u73B0\u7A0B\u5E8F\u65E0\u6CD5\u6709\u6548\u5904\u7406\u8D28\u6570\u7684\u5E73\u65B9\u3002\u6240\u4EE5\u6211\u4EEC\u8981\u628A 2,3,5,7 \u7684\u5E73\u65B9 4,9,25,49 \u90FD\u653E\u8FDB\u53BB\uFF0C\u603B\u5171 19 \u4E2A\u6570\u5B57\uFF0C\u7B26\u5408\u9898\u610F\u3002</p><details class="custom-container details"><summary>\u53C2\u8003\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> prime<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span>
                     <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> res<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> prime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;y&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>cnt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;composite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;prime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="cf843b-interactive-lowerbound" tabindex="-1"><a class="header-anchor" href="#cf843b-interactive-lowerbound" aria-hidden="true">#</a> CF843B Interactive LowerBound</h2><p>\u94FE\u8868\u6700\u591A\u6709 \u4E2A\u5143\u7D20\uFF0C\u4F46\u6211\u4EEC\u53EA\u80FD\u8BE2\u95EE \u6B21\uFF0C\u5E76\u4E14\u53EA\u80FD\u83B7\u53D6\u5143\u7D20\u7684\u540E\u4E00\u4E2A\u5143\u7D20\uFF0C\u6240\u4EE5\u666E\u901A\u7684\u904D\u5386\u6574\u4E2A\u94FE\u8868\u7684\u65B9\u6CD5\u4E0D\u53EF\u7528\u3002\u76F4\u63A5\u8BBE\u6CD5\u903C\u8FD1\u76EE\u6807\u5143\u7D20\u7684\u4F4D\u7F6E\u53EA\u6709\u4E00\u79CD\u65B9\u6CD5\uFF1A\u968F\u673A\u6492\u70B9\u3002</p><p>\u5BF9\u4E8E \u7684\u60C5\u51B5\u76F4\u63A5\u679A\u4E3E\uFF0C \u65F6\uFF0C\u6211\u4EEC\u76F4\u63A5\u6492 1000 \u4E2A\u70B9\uFF0C\u8FD9\u65F6\u8FD9\u4E9B\u70B9\u4E4B\u95F4\u7684\u671F\u671B\u8DDD\u79BB\u5F88\u5C0F\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u4ECE\u5C0F\u4E8E \u7684\u6700\u5927\u503C\u5F00\u59CB\u5411\u540E\u904D\u5386\uFF0C\u53EF\u4EE5\u8BC1\u660E\u5728\u5230\u8FBE\u4E0B\u4E00\u4E2A\u70B9\u4E4B\u524D\u6211\u4EEC\u5C31\u5DF2\u5F97\u5230\u7B54\u6848\u3002\u904D\u5386\u7684\u8FC7\u7A0B\u4E2D\u4E00\u65E6\u627E\u5230\u5927\u4E8E\u7B49\u4E8E \u7684\u5143\u7D20\uFF0C\u5C31\u53EF\u4EE5\u76F4\u63A5\u63A8\u51FA\u3002</p><p>\u867D\u7136\u6574\u4F53\u601D\u8DEF\u7B80\u5355\uFF0C\u4F46\u5B9E\u9645\u60C5\u51B5\u4E0B\uFF0C\u5982\u679C\u6CA1\u6709\u5B66\u4E60\u8FC7\u6A21\u62DF\u9000\u706B\u7B49\u975E\u5B8C\u7F8E\u968F\u673A\u7B97\u6CD5\uFF0C\u601D\u8003\u8D77\u6765\u5F88\u53EF\u80FD\u4F1A\u56F0\u96BE\u4E00\u4E9B\u3002</p><p>\u540C\u65F6\u7531\u4E8E Codeforces \u5177\u6709 hack \u673A\u5236\uFF0C\u5F88\u591A\u4EBA\u4F1A\u523B\u610F\u5361\u6389\u6CA1\u6709\u521D\u59CB\u5316\u968F\u673A\u79CD\u5B50\u7684\u4EE3\u7801\uFF0C\u6240\u4EE5\u5728 <code>random_shuffle()</code> \u51FD\u6570\u524D\u9700\u8981 <code>srand((size_t)new char)</code>\u3002</p><details class="custom-container details"><summary>\u53C2\u8003\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> start<span class="token punctuation">,</span> x<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">2e9</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;? %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> val<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">2e9</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;! %d&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> start<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">random_shuffle</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;? %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> val<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> x <span class="token operator">&amp;&amp;</span> val <span class="token operator">&gt;</span> ans<span class="token punctuation">)</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;? %d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> val<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ans <span class="token operator">=</span> val<span class="token punctuation">;</span>
      p <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;! %d&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="uoj206-apio2016-gap" tabindex="-1"><a class="header-anchor" href="#uoj206-apio2016-gap" aria-hidden="true">#</a> UOJ206[APIO2016]Gap</h2><p>\u5206\u4E24\u4E2A\u5B50\u4EFB\u52A1\u8BA8\u8BBA\uFF1A</p><ol><li><p>\u67E5\u8BE2\u6B21\u6570\u9650\u5236\u3002</p><p>\u6211\u4EEC\u8003\u8651\u7B2C\u4E00\u6B21\u67E5\u8BE2\u3002\u56E0\u4E3A\u6211\u4EEC\u4E00\u5F00\u59CB\u4E0D\u77E5\u9053\u4EFB\u4F55\u6570\uFF0C\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u8BE2\u95EE\u8303\u56F4 \uFF0C\u83B7\u5F97\u6700\u5927\u6700\u5C0F\u503C\u3002</p><p>\u7531\u4E8E\u67E5\u8BE2\u6B21\u6570\u9650\u5236\u521A\u597D\u4E3A \uFF0C\u6240\u4EE5\u8003\u8651\u600E\u4E48\u6BCF\u4E00\u6B21\u90FD\u80FD\u83B7\u53D6\u4E4B\u524D\u6CA1\u6709\u83B7\u53D6\u8FC7\u7684\u503C\uFF0C\u8FD9\u6837\u80FD\u5927\u6982\u5728\u6B21\u6570\u8303\u56F4\u5185\u83B7\u53D6\u5E8F\u5217\u5185\u7684\u6240\u6709\u6570\u3002\u65B9\u6CD5\u4E5F\u5F88\u7B80\u5355\uFF1A\u6BCF\u6B21\u67E5\u8BE2 \u540E\uFF0C\u8BBE\u83B7\u5F97\u7684\u503C\u4E3A \uFF0C\u5219\u4E0B\u4E00\u6B21\u67E5\u8BE2 \u3002</p></li><li><p>\u8BE2\u95EE\u533A\u95F4\u5927\u5C0F\u9650\u5236\u3002</p><p>\u7531\u4E8E\u9898\u76EE\u8981\u6C42\u8BE2\u95EE\u533A\u95F4\u5185\u7684\u6570\u7684\u6570\u91CF\u4E4B\u548C\u4E0D\u80FD\u8D85\u8FC7 \uFF0C\u6240\u4EE5\u8003\u8651\u6700\u5C0F\u5316\u8BE2\u95EE\u533A\u95F4\u3002\u4E0A\u9762\u7684\u65B9\u6CD5\u4E0D\u518D\u53EF\u7528\uFF0C\u56E0\u4E3A\u5176\u8BE2\u95EE\u533A\u95F4\u5185\u7684\u6570\u6570\u91CF\u4E4B\u548C\u89C4\u6A21\u4E3A \u3002\u6211\u4EEC\u53EF\u4EE5\u8003\u8651\u4E8C\u5206\u503C\u57DF\uFF0C\u4F46\u8FD9\u79CD\u65B9\u6CD5\u5E76\u4E0D\u53EF\u9760\uFF0C\u6700\u574F\u53EF\u80FD\u4F1A\u88AB\u5361\u5230 \u3002\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u66F4\u6709\u6548\u7684\u5212\u5206\u503C\u57DF\u7684\u65B9\u6CD5\uFF0C\u907F\u514D\u67E5\u8BE2\u533A\u95F4\u5185\u7684\u70B9\u91CD\u590D\u67E5\u8BE2\uFF0C\u6D6A\u8D39\u673A\u4F1A\u3002</p><p>\u8003\u8651\u5230\u7B54\u6848\u4E0D\u4F1A\u5C0F\u4E8E \uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u8003\u8651\u6309\u8FD9\u4E2A\u503C\u5212\u5206\u503C\u57DF\uFF0C\u8BBE \u521D\u59CB\u4E3A 0\uFF0C \u521D\u59CB\u4E3A\u4E0A\u8FF0\u503C\uFF0C\u6BCF\u6B21\u8BE2\u95EE \u5E76\u4E14\u66F4\u65B0 \uFF0C\u4E4B\u540E\u518D\u4EE5 \u4E3A\u6B65\u957F\u8BA9 \u81EA\u589E\u3002</p><p>\u4E0D\u8FC7\u8FD9\u79CD\u65B9\u6CD5\u4E5F\u4E0D\u80FD\u5F88\u597D\u5730\u9002\u7528\u4E8E\u5B50\u4EFB\u52A1 1\uFF0C\u56E0\u4E3A\u6700\u574F\u53EF\u80FD\u5F88\u591A\u8BE2\u95EE\u7684\u503C\u57DF\u5185\u4E00\u4E2A\u6570\u90FD\u6CA1\u6709\u3002</p></li></ol><details class="custom-container details"><summary>\u53C2\u8003\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;gap.h&quot;</span></span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">findGap</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> t1<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MinMax</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> t1<span class="token punctuation">;</span>
      s <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> t1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MinMax</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> s1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> l <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> t1<span class="token punctuation">,</span> last <span class="token operator">=</span> s1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MinMax</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> ans<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      i <span class="token operator">+=</span> ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s1 <span class="token operator">-</span> last<span class="token punctuation">)</span><span class="token punctuation">,</span> last <span class="token operator">=</span> t1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="cf750f-new-year-and-finding-roots" tabindex="-1"><a class="header-anchor" href="#cf750f-new-year-and-finding-roots" aria-hidden="true">#</a> CF750F New Year and Finding Roots</h2><p>\u770B\u5230 \uFF0C\u8BE2\u95EE\u6B21\u6570 \u7684\u4E25\u683C\u8981\u6C42\uFF0C\u6211\u4EEC\u9700\u8981\u975E\u5E38\u4E25\u683C\u5730\u6700\u5927\u5316\u5229\u7528\u8BBF\u95EE\u83B7\u5F97\u7684\u4FE1\u606F\u3002</p><p>\u65F6\u53EF\u4EE5\u76F4\u63A5\u66B4\u529B\u679A\u4E3E\u3002\u7136\u800C \u65F6\u9700\u8981\u5F88\u9AD8\u6548\u7684\u904D\u5386\u7B97\u6CD5\u3002</p><p>\u968F\u673A\u6492\u70B9\u4E0D\u662F\u597D\u65B9\u6CD5\uFF0C\u56E0\u4E3A\u968F\u673A\u6492\u70B9\u65E0\u6CD5\u786E\u5B9A\u81EA\u5DF1\u662F\u5426\u8DB3\u591F\u63A5\u8FD1\u6839\u8282\u70B9\u4E86\uFF0C\u5E76\u4E14\u5355\u7EAF\u968F\u673A\u6492\u70B9\uFF0C\u81F3\u5C11\u6709\u4E00\u6B21\u78B0\u5230\u6839\u8282\u70B9\u7684\u6982\u7387\u4E3A \uFF0C\u5373\u4F7F\u6392\u9664\u91CD\u590D\u6492\u70B9\u7684\u60C5\u51B5\u540E\uFF0C\u78B0\u5230\u6839\u8282\u70B9\u7684\u6982\u7387\u4ECD\u7136\u975E\u5E38\u5C0F\u3002</p><p>\u7531\u4E8E \uFF0C\u5E76\u4E14\u6211\u4EEC\u5E76\u4E0D\u77E5\u9053\u54EA\u4E00\u8FB9\u66F4\u63A5\u8FD1\u6839\u8282\u70B9\uFF0C\u6240\u4EE5\u6211\u4EEC\u8003\u8651\u6700\u574F\u7684\u60C5\u51B5\uFF0C\u5373\u5982\u679C \u65F6\uFF0C\u524D\u4E24\u6B21\u6211\u4EEC\u7684\u904D\u5386\u65B9\u5411\u90FD\u662F\u8FDC\u79BB\u6839\u8282\u70B9\u7684\uFF0C\u7B2C\u4E09\u6B21\u904D\u5386\u65B9\u5411\u662F\u63A5\u8FD1\u6839\u8282\u70B9\u7684\u3002\u6240\u4EE5\u6211\u4EEC\u5FC5\u987B\u5F80\u4E09\u4E2A\u65B9\u5411\u90FD\u904D\u5386\u3002</p><p>\u8003\u8651 bfs \u548C dfs \u4E24\u79CD\u904D\u5386\u65B9\u6CD5\u3002\u7531\u4E8E bfs \u641C\u7D22\u6811\u53EF\u80FD\u5F88\u5927\uFF0C\u6240\u4EE5\u6211\u4EEC\u4F18\u5148\u8003\u8651 dfs\u3002\u5F53\u7136\uFF0C\u5982\u679C\u6211\u4EEC\u77E5\u9053\u5F53\u524D\u7684\u6DF1\u5EA6\uFF0C\u5E76\u4E14\u5F53\u524D\u6DF1\u5EA6\u5C0F\u5230\u6DF1\u5EA6\u8303\u56F4\u5185\u7684\u641C\u7D22\u6811\u89C4\u6A21\u5C0F\u4E8E\u7B49\u4E8E\u5269\u4F59\u6B21\u6570\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u76F4\u63A5 bfs\u3002</p><p>\u77E5\u9053\u5F53\u524D\u8282\u70B9\u7684\u6DF1\u5EA6\uFF0C\u4EE5\u53CA\u5F53\u524D\u904D\u5386\u7684\u65B9\u5411\u4F1A\u83B7\u5F97\u5F88\u5927\u4F18\u52BF\u3002\u7136\u800C\u77E5\u9053\u5F53\u524D\u5728\u5F80\u6839\u8282\u70B9\u8FD8\u662F\u5728\u5F80\u53F6\u5B50\u8282\u70B9\u904D\u5386\u662F\u975E\u5E38\u56F0\u96BE\u7684\u4E8B\u60C5\u3002\u5982\u679C\u4F7F\u7528 dfs\uFF0C\u53EA\u6709\u5F53\u904D\u5386\u5230\u6839\u8282\u70B9\uFF08\uFF09\u6216\u8005\u53F6\u5B50\u8282\u70B9\uFF08\uFF09\u65F6\u624D\u77E5\u9053\u5F53\u524D\u65B9\u5411\u3002\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u5C3D\u53EF\u80FD\u77E5\u9053\u5F53\u524D\u8282\u70B9\u6DF1\u5EA6\uFF0C\u5E76\u4E14\u4E0D\u80FD\u91C7\u7528\u7C7B\u4F3C\u8FED\u4EE3\u52A0\u6DF1\u641C\u7D22\u7684\u65B9\u6CD5\uFF0C\u904D\u5386\u4E2D\u9014\u505C\u4E0B\u6765\u3002</p><p>\u8003\u8651\u968F\u673A\u4E00\u4E2A\u521D\u59CB\u8282\u70B9\uFF0C\u4ECE\u521D\u59CB\u8282\u70B9\u51FA\u53D1\u53EF\u80FD\u78B0\u5230\u4E0A\u9762\u7684\u6700\u574F\u60C5\u51B5\u3002</p><p>\u5982\u679C \uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u76F4\u63A5\u77E5\u9053\u5F53\u524D\u8282\u70B9\u7684\u6DF1\u5EA6\u3002</p><p>\u5982\u679C \uFF0C\u90A3\u5F53\u524D\u8282\u70B9\u5373\u6839\u8282\u70B9\u3002</p><p>\u5982\u679C \uFF0C\u6211\u4EEC\u76F4\u63A5\u8003\u8651\u5F80\u4E09\u4E2A\u65B9\u5411 dfs\u3002\u8003\u8651\u5230\u5176\u4E2D\u4E24\u4E2A\u65B9\u5411\u662F\u76F4\u63A5\u5F80\u53F6\u5B50\u8282\u70B9\u7684\u65B9\u5411\uFF0C\u904D\u5386\u8DEF\u5F84\u957F\u5EA6\u76F8\u540C\uFF1B\u53E6\u4E00\u4E2A\u65B9\u5411\u662F\u5F80\u6839\u8282\u70B9\u7684\u65B9\u5411\uFF0C\u4E0D\u8FC7\u53EF\u80FD\u4E2D\u9014\u4E0D\u5C0F\u5FC3\u5F80\u53F6\u5B50\u8282\u70B9\u7684\u65B9\u5411\u8D70\u4E86\uFF0C\u904D\u5386\u8DEF\u5F84\u957F\u5EA6\u4F1A\u8F83\u5927\u3002\u6B64\u65F6\u6211\u4EEC\u5C31\u53EF\u4EE5\u8BA1\u7B97\u51FA\u5F53\u524D\u8282\u70B9\u7684\u6DF1\u5EA6\u3002</p><p>\u5F53 \u6216\u8005 \u65F6\uFF0C\u6211\u4EEC\u9700\u8981\u8003\u8651\u8F83\u957F\u7684\u904D\u5386\u8DEF\u5F84\u3002\u6211\u4EEC\u53EF\u4EE5\u77E5\u9053\u8DEF\u5F84\u4E0A\u6DF1\u5EA6\u6700\u5C0F\u7684\u70B9\uFF08\u5FC5\u5B9A\u6BD4\u521D\u59CB\u8282\u70B9\u6DF1\u5EA6\u5C0F\uFF09\u3002\u5982\u679C\u6211\u4EEC\u4E3A\u8BBF\u95EE\u8FC7\u7684\u8282\u70B9\u6253\u6807\u8BB0\uFF0C\u4E0D\u518D\u904D\u5386\uFF0C\u6B64\u65F6\u4ECE\u8BE5\u8282\u70B9\u5F00\u59CB\u5C31\u53EA\u6709\u4E00\u6761\u904D\u5386\u8DEF\u5F84\u3002\u867D\u7136\u8FD9\u6761\u8DEF\u5F84\u53EF\u80FD\u8FD8\u662F\u4F1A\u8D70\u5411\u53F6\u5B50\u8282\u70B9\uFF0C\u4F46\u662F\u8FD9\u6761\u8DEF\u5F84\u4E0A\u540C\u6837\u5FC5\u7136\u5B58\u5728\u6DF1\u5EA6\u6BD4\u8D77\u70B9\u5C0F\u7684\u8282\u70B9\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u4ECE\u8FD9\u4E2A\u8282\u70B9\u5F00\u59CB\u7EE7\u7EED\u91CD\u590D\u4E0A\u9762\u7684\u6B65\u9AA4\u3002</p><p>\u5F53\u7136\uFF0C\u6211\u4EEC\u8003\u8651 \u7684\u6700\u574F\u60C5\u51B5\u65F6\uFF08\u6BCF\u6B21\u53EA\u5F80\u6839\u8282\u70B9\u8D70\u4E00\u6B65\uFF0C\u5C31\u76F4\u63A5\u5F80\u53F6\u5B50\u8282\u70B9\u8D70\uFF09\uFF0C\u4F1A\u53D1\u73B0\u5982\u679C\u53EA dfs\uFF0C\u6700\u574F\u9700\u8981 \u6B21\u8BE2\u95EE\u3002\u4E0D\u8FC7\u6211\u4EEC\u5DF2\u7ECF\u77E5\u9053\u521D\u59CB\u8282\u70B9\u7684\u6DF1\u5EA6\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u7B97\u51FA\u6240\u6709\u5DF2\u904D\u5386\u8282\u70B9\u7684\u6DF1\u5EA6\uFF0C\u5E76\u4E14\u6839\u636E\u6211\u4EEC\u5F00\u59CB\u65F6\u5BF9 bfs \u7684\u8BA8\u8BBA\uFF0C\u5224\u65AD\u662F\u5426\u53EF\u4EE5\u4ECE\u6DF1\u5EA6\u6700\u5C0F\u7684\u70B9\u76F4\u63A5 bfs\u3002</p><p>\u8FD9\u65F6\uFF0C\u6211\u4EEC\u53EF\u4EE5\u7B97\u51FA\u6700\u574F\u9700\u8981 17 \u6B21\u3002\u6240\u4EE5\u6211\u4EEC\u8003\u8651\u4ECE\u641C\u7D22\u6811\u4E0A\u53BB\u6389\u4E00\u4E2A\u8282\u70B9\uFF08\u6839\u636E dfs \u53EA\u80FD\u76F2\u76EE\u904D\u5386\u7684\u6027\u8D28\uFF0C\u6211\u4EEC\u8003\u8651 bfs\uFF09\uFF1A\u5373\u5F53\u8FDB\u884C\u6DF1\u5EA6\u4E3A \u7684 bfs \u65F6\uFF0C\u641C\u7D22\u6811\u8282\u70B9\u6700\u574F\u6709 \u4E2A\uFF0C\u53EF\u80FD\u9700\u8981 \u6B21\u8BE2\u95EE\u624D\u80FD\u786E\u5B9A\u54EA\u4E2A\u8282\u70B9\u7684\u90BB\u5C45\u6070\u6709 2 \u4E2A\u3002\u4E0D\u8FC7\u6211\u4EEC\u5982\u679C\u5DF2\u7ECF\u5BF9\u5176\u4E2D \u4E2A\u8282\u70B9\u8BE2\u95EE\u540E\uFF0C\u53EF\u4EE5\u77E5\u9053\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u80AF\u5B9A\u662F\u6839\u8282\u70B9\u3002</p><p>\u6B64\u65F6\u6700\u574F\u60C5\u51B5\u4E0B\u7684\u6700\u4F18\u89E3\u4E3A\uFF1A \u65F6\uFF0C\u4ECE\u53F6\u5B50\u8282\u70B9 dfs\uFF0C\u6BCF\u6B21\u90FD\u662F\u53EA\u5F80\u6839\u8282\u70B9\u8D70\u4E00\u6B65\uFF0C\u5C31\u76F4\u63A5\u5F80\u53F6\u5B50\u8282\u70B9\u8D70\uFF0C\u8BE2\u95EE 10 \u6B21\u540E\uFF0C\u5F53\u524D\u5DF2\u77E5\u6700\u5C0F\u6DF1\u5EA6\u7684\u8282\u70B9\u6DF1\u5EA6\u4E3A 4\uFF0C\u7531\u4E8E\u5DF2\u77E5\u5176\u7236\u4EB2\uFF0C\u76F4\u63A5\u4ECE\u5176\u7236\u4EB2\u5F00\u59CB bfs\uFF08\u641C\u7D22\u6811\u6DF1\u5EA6\u4E3A 3\uFF0C\u8282\u70B9\u6570\u4E3A \uFF09\u3002\u5728 bfs \u65F6\u8BE2\u95EE\u4E86 \u6B21\u540E\uFF0C\u786E\u5B9A bfs \u641C\u7D22\u6811\u4E0A\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u4E3A\u6839\u8282\u70B9\u3002</p><p>\u6B64\u65F6\u6211\u4EEC\u7684\u7B97\u6CD5\u53EF\u4EE5\u521A\u597D\u5361\u5230\u6700\u574F 16 \u6B21\u3002</p><details class="custom-container details"><summary>\u53C2\u8003\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> h<span class="token punctuation">,</span> chance<span class="token punctuation">;</span>
<span class="token keyword">bool</span> ok<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> to<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;? %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;! %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    chance<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> to<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;! %d\\n&quot;</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chance <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> long_path<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> root<span class="token punctuation">,</span> dep<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      root <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dep <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> to<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> long_path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> long_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      dep <span class="token operator">=</span> h <span class="token operator">-</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> long_path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> long_path<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>long_path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>dep <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;</span> chance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      path<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      dep <span class="token operator">=</span> h <span class="token operator">-</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> dep <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token function">bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>dep <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="uva12731-\u592A\u7A7A\u7AD9\u4E4B\u8C1C-mysterious-space-station" tabindex="-1"><a class="header-anchor" href="#uva12731-\u592A\u7A7A\u7AD9\u4E4B\u8C1C-mysterious-space-station" aria-hidden="true">#</a> UVA12731 \u592A\u7A7A\u7AD9\u4E4B\u8C1C Mysterious Space Station</h2><p>\u7531\u4E8E\u552F\u4E00\u7684\u53CD\u9988\u662F\u79FB\u52A8\u65F6\u662F\u5426\u649E\u5899\uFF0C\u6240\u4EE5\u6211\u4EEC\u5E94\u8BE5\u8003\u8651\u5728\u673A\u5668\u4EBA\u4E0D\u8D70\u4E22\u7684\u60C5\u51B5\u4E0B\uFF0C\u5C3D\u91CF\u63A5\u8FD1\u5899\u8FB9\u8D70\u8DEF\uFF0C\u8FD9\u6837\u6709\u51E0\u4E2A\u597D\u5904\uFF1A</p><ul><li>\u9760\u8FD1\u5899\u8FB9\u8D70\u8DEF\u65F6\uFF0C\u5F88\u5BB9\u6613\u77E5\u9053\u81EA\u5DF1\u4F1A\u4E0D\u4F1A\u649E\u5899\uFF0C\u83B7\u53D6\u5230\u5C3D\u91CF\u591A\u7684\u4FE1\u606F\u3002</li><li>\u5899\u8FB9\u90FD\u662F\u4E0D\u4F1A\u51FA\u73B0\u4F20\u9001\u95E8\u7684\u683C\u5B50\uFF0C\u53EF\u4EE5\u907F\u514D\u673A\u5668\u4EBA\u8D70\u4E22\u3002</li></ul>`,34),S=s("\u6240\u4EE5\uFF0C\u6211\u4EEC\u5982\u679C\u5DF2\u77E5\u673A\u5668\u4EBA\u53EF\u80FD\u5728\u5899\u8FB9\u7684\u67D0\u4E2A\u4F4D\u7F6E\uFF0C\u8981\u786E\u5B9A\u673A\u5668\u4EBA\u662F\u4E0D\u662F\u771F\u7684\u5728\u8FD9\u4E2A\u4F4D\u7F6E\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7 "),C={href:"https://en.wikipedia.org/wiki/Maze_solving_algorithm",target:"_blank",rel:"noopener noreferrer"},F=s("\u201C\u5355\u624B\u6276\u5899\u6CD5\u201D"),A=s(" \u786E\u5B9A\u81EA\u5DF1\u662F\u4E0D\u662F\u771F\u7684\u5728\u8FD9\u4E2A\u4F4D\u7F6E\u3002\u6839\u636E\u62D3\u6251\u5B66\u539F\u7406\uFF0C\u5728\u4E24\u8FB9\u90FD\u662F\u5899\u7684\u8FF7\u5BAB\u4E2D\uFF0C\u5982\u679C\u4ECE\u5165\u53E3\u8FDB\u5165\uFF0C\u5E76\u4E14\u603B\u662F\u7528\u4E00\u53EA\u624B\u6276\u7740\u540C\u4E00\u8FB9\u5899\uFF0C\u5C31\u53EF\u4EE5\u4FDD\u8BC1\u627E\u5230\u51FA\u53E3\u3002\u7531\u4E8E\u672C\u9898\u4E2D\u7684\u5899\u662F\u95ED\u5408\u7684\uFF0C\u6240\u4EE5\u53EA\u9700\u8981\u6CBF\u7740\u5899\u8FB9\u7684\u9053\u8DEF\u8D70\uFF0C\u5C31\u53EF\u4EE5\u4FDD\u8BC1\u53EF\u4EE5\u56DE\u5230\u539F\u70B9\u800C\u4E0D\u4F1A\u649E\u5899\u3002\u53E6\u5916\uFF0C\u7531\u4E8E\u5899\u8FB9\u7684\u9053\u8DEF\u662F\u5730\u56FE\u4E0A\u7684\u6700\u5927\u95ED\u5408\u56DE\u8DEF\uFF0C\u6240\u4EE5\u5B9E\u9645\u4EE3\u7801\u4E2D\u5E76\u4E0D\u9700\u8981\u7279\u610F\u649E\u5899\u4EE5\u4FDD\u8BC1\u673A\u5668\u4EBA\u5728\u5899\u8FB9\uFF0C\u53EF\u4EE5\u4F7F\u7528\u6807\u8BB0\u5728\u5730\u56FE\u4E2D\u6807\u660E\u5899\u8FB9\u9053\u8DEF\u3002\u800C\u4E14\u4E00\u65E6\u649E\u4E86\u5899\uFF0C\u5C31\u9700\u8981\u8D76\u5FEB\u6CBF\u7740\u539F\u8DEF\u8FD4\u56DE\uFF0C\u53EF\u4EE5\u5728\u907F\u514D\u673A\u5668\u4EBA\u8D70\u4E22\u7684\u540C\u65F6\u51CF\u5C11\u6B65\u6570\u3002"),V=n("p",null,"\u7531\u4E0A\uFF0C\u53EF\u4EE5\u63A8\u65AD\u51FA\u786E\u5B9A\u673A\u5668\u4EBA\u662F\u5426\u5728\u7279\u5B9A\u683C\u5B50\u7684\u8BD5\u9519\u6CD5\uFF1A\u5C06\u673A\u5668\u4EBA\u5728\u4E0D\u8D70\u5230\u672A\u77E5\u683C\u5B50\u6216\u5DF2\u77E5\u4F20\u9001\u95E8\u7684\u60C5\u51B5\u4E0B\u8D70\u5230\u5899\u8FB9\u7684\u9053\u8DEF\u4E0A\uFF0C\u7136\u540E\u7ED5\u7740\u5899\u8FB9\u9053\u8DEF\u8D70\u4E00\u5708\u3002\u8FD9\u4E2A\u8FC7\u7A0B\u4E2D\u5982\u679C\u6CA1\u6709\u649E\u5899\uFF0C\u5C31\u53EF\u4EE5\u786E\u5B9A\u673A\u5668\u4EBA\u786E\u5B9E\u662F\u5728\u7279\u5B9A\u683C\u5B50\u3002",-1),M=n("p",null,"\u6211\u4EEC\u53EF\u4EE5\u91C7\u7528\u4E0A\u9762\u7684\u65B9\u6CD5\uFF0C\u4E00\u5F00\u59CB\u6807\u51FA\u56FE\u4E2D\u6240\u6709\u672A\u77E5\u683C\u5B50\uFF0C\u7136\u540E\u4ECE\u4E0A\u5230\u4E0B\uFF0C\u4ECE\u5DE6\u5230\u53F3\u4F9D\u6B21\u5224\u65AD\u6BCF\u4E2A\u672A\u77E5\u683C\u5B50\u662F\u5426\u662F\u4F20\u9001\u95E8\u3002\u53EF\u4EE5\u5148\u8D70\u5230\u672A\u77E5\u683C\u5B50\u4E0A\u65B9\uFF0C\u7136\u540E\u5411\u4E0B\u3001\u5411\u5DE6\u8D70\u3002\u518D\u7528\u4E0A\u9762\u7684\u65B9\u6CD5\u5224\u65AD\u673A\u5668\u4EBA\u662F\u4E0D\u662F\u5728\u672A\u77E5\u683C\u5B50\u7684\u5DE6\u4FA7\u3002\u5982\u679C\u4E0D\u662F\uFF0C\u8BF4\u660E\u673A\u5668\u4EBA\u4E0D\u5728\u5E94\u8BE5\u5728\u7684\u4F4D\u7F6E\uFF0C\u5373\u672A\u77E5\u683C\u5B50\u662F\u4F20\u9001\u95E8\u3002",-1),W=n("p",null,"\u627E\u51FA\u672A\u77E5\u683C\u5B50\u540E\u5C31\u9700\u8981\u5224\u65AD 2k \u4E2A\u672A\u77E5\u683C\u5B50\u7684\u914D\u5BF9\u5173\u7CFB\uFF0C\u5B9E\u9645\u65B9\u6CD5\u4E5F\u5F88\u7B80\u5355\uFF1A\u53EA\u9700\u8981\u66B4\u529B\u914D\u5BF9\u5C31\u53EF\u4EE5\u4E86\u3002\u7531\u4E8E \uFF0C\u6240\u4EE5\u6700\u591A\u53EA\u9700\u8981 \u6B21\u8BD5\u9519\u6CD5\u3002\u4F5C\u4E3A\u5BF9\u6BD4\uFF0C\u5224\u65AD\u56FE\u4E2D\u5168\u90E8\u672A\u77E5\u683C\u5B50\u7684\u60C5\u51B5\u6700\u591A\u9700\u8981 \u6B21\u8BD5\u9519\u6CD5\u3002",-1),B=s("\u7531\u4E8E\u76EE\u524D\u4E0B\u9762\u8FD9\u4E00\u4EFD\u4EE3\u7801\u53EA\u80FD\u901A\u8FC7 UOJ \u7684\u955C\u50CF\u9898\uFF1A"),L={href:"http://uoj.ac/problem/247",target:"_blank",rel:"noopener noreferrer"},E=s("#247.\u3010Rujia Liu's Present 7\u3011Mysterious Space Station"),J=s("\uFF0C\u800C\u65E0\u6CD5\u901A\u8FC7 UVa \u539F\u9898\u3002\u4FEE\u6539\u4E86 UOJ \u4E0A\u5218\u6C5D\u4F73\u7684\u6807\u7A0B\u540E\u8FD8\u662F\u65E0\u6CD5\u901A\u8FC7\uFF0C\u5E76\u4E14\u6682\u65F6\u65E0\u6CD5\u8054\u7CFB\u5230\u5218\u6C5D\u4F73\u3002\u6240\u4EE5\u4E0B\u9762\u7684\u4EE3\u7801\u4EE5 UOJ \u4E3A\u51C6\u3002"),T=s("\u4E0D\u8FC7\u5218\u6C5D\u4F73\u7684\u6807\u7A0B\u8D28\u91CF\u8FD8\u662F\u6BD4\u4E0B\u9762\u8FD9\u4EFD\u4EE3\u7801\u8D28\u91CF\u9AD8\u5F88\u591A\u7684\uFF0C\u53EF\u4EE5\u5728 UOJ \u4E0A\u67E5\u770B\u5230 "),G={href:"http://uoj.ac/submission/105789",target:"_blank",rel:"noopener noreferrer"},R=s("\u901A\u8FC7\u4E86 UOJ \u955C\u50CF\u9898\u7684\u6807\u7A0B"),Y=s("\u3002\u540C\u4E00\u4EFD\u6570\u636E\u4E0B\uFF0C\u6807\u7A0B\u4F7F\u7528\u7684\u79FB\u52A8\u6B21\u6570\u975E\u5E38\u5C11\u3002"),D=t(`<details class="custom-container details"><summary>\u53C2\u8003\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Wall</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Unknown</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Space</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Gate</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Path</span> <span class="token expression"><span class="token number">4</span></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                       <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> dirs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;ESWN&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">point</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token function">point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> tmp<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">==</span> tmp<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> tmp<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> tmp<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  point <span class="token function">side</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">point</span><span class="token punctuation">(</span>x <span class="token operator">+</span> dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>x <span class="token operator">+</span> dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token double-colon punctuation">::</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span> start<span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> path<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> point<span class="token operator">&gt;</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>point<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;MoveRobot %c\\n&quot;</span><span class="token punctuation">,</span> dirs<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">walk</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> c<span class="token punctuation">;</span>
      std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;S&#39;</span><span class="token punctuation">)</span> start <span class="token operator">=</span> <span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Wall<span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Unknown<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Answer %d %d\\n&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5355\u624B\u6276\u5899\u6CD5\uFF0C\u56E0\u4E3A\u9760\u5899\u7684 Path \u662F\u6781\u5927\u95ED\u5408\u73AF\uFF0C\u6240\u4EE5\u53EA\u9700\u8981\u5728\u6CBF\u7740 Path</span>
<span class="token comment">// \u8D70\u7684\u8FC7\u7A0B\u4E2D\u6CA1\u6709\u78B0\u5230\u969C\u788D\u5C31\u53EF\u4EE5\u4E86</span>
<span class="token keyword">void</span> <span class="token function">wall_follower_init</span><span class="token punctuation">(</span>point x<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">int</span> wallside<span class="token punctuation">,</span> point s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> s <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>wallside<span class="token punctuation">)</span> <span class="token operator">==</span> Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> wallside<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wall_follower_init</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>wallside<span class="token punctuation">)</span><span class="token punctuation">,</span> wallside<span class="token punctuation">,</span> last <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">==</span> Wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>last <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> Wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wall_follower_init</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> last<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wall_follower_init</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">,</span> last<span class="token punctuation">,</span> wallside<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> Unknown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> Wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Path<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  path<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> wallside <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      wallside <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Path <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token punctuation">(</span>wallside <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      last <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token function">wall_follower_init</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> last<span class="token punctuation">,</span> wallside<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">walk</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">wall_follower</span><span class="token punctuation">(</span>point x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">!=</span> x<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">walk</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span>
      st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">walk</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span>
      st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token function">undo</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u786E\u5B9A\u81EA\u5DF1\u5F53\u524D\u5728</span>
<span class="token comment">// x\uFF0C\u4F7F\u7528\u201C\u6478\u7740\u77F3\u5934\u8FC7\u6CB3\u201D\u7684\u65B9\u6CD5\uFF0C\u53EA\u9700\u8981\u6CBF\u7740\u53EF\u4EE5\u907F\u5F00\u969C\u788D\u3001\u672A\u77E5\u683C\u5B50\u548C\u4F20\u9001\u95E8\u7684\u65B9\u5411\u8D70\u5230</span>
<span class="token comment">// Path \u5C31\u884C\u3002 \u5728\u627E\u4F20\u9001\u95E8\u548C\u914D\u5BF9\u4F20\u9001\u95E8\u65F6\u4F7F\u7528</span>
<span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>point s<span class="token punctuation">,</span> point t<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>point<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
  map<span class="token punctuation">[</span>s<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    point x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      point y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Path <span class="token operator">||</span> x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Space<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>y<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">[</span>y<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>point x <span class="token operator">=</span> t<span class="token punctuation">;</span> x <span class="token operator">!=</span> s<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">move</span><span class="token punctuation">(</span>point s<span class="token punctuation">,</span> point t<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5728\u9760\u8FD1\u4F20\u9001\u95E8\u65F6\u4F7F\u7528</span>
  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> v<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">walk</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> st<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5C3D\u53EF\u80FD\u5FEB\u5730\u5411\u5899\u8FB9\u79FB\u52A8</span>
<span class="token keyword">bool</span> <span class="token function">make_sure</span><span class="token punctuation">(</span>point x<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> Path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">wall_follower</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Path <span class="token operator">||</span> x<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> Space<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token punctuation">(</span>last <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">walk</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">bool</span> ret <span class="token operator">=</span> <span class="token function">make_sure</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">walk</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">find_gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> Unknown<span class="token punctuation">)</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Space<span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> Unknown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token function">point</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span>
          ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span>
          ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span>
          ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">make_sure</span><span class="token punctuation">(</span><span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          vis<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Gate<span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            point y <span class="token operator">=</span> <span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> Unknown<span class="token punctuation">)</span> a<span class="token punctuation">[</span>y<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> Space<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Space<span class="token punctuation">;</span>
        <span class="token function">undo</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">make_gate_pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">make_sure</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">undo</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">find_gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">make_gate_pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="\u4E60\u9898" tabindex="-1"><a class="header-anchor" href="#\u4E60\u9898" aria-hidden="true">#</a> \u4E60\u9898</h2>`,2),H={href:"https://onlinejudge.org/contests/328-9976a2e2/",target:"_blank",rel:"noopener noreferrer"},K=s("\u5218\u6C5D\u4F73\u7684\u4EA4\u4E92\u9898\u4E13\u573A\u6BD4\u8D5B Rujia Liu's Present 7 \u8D28\u91CF\u975E\u5E38\u9AD8\uFF0C\u63A8\u8350\u4E00\u505A\u3002"),Q={href:"https://www.luogu.com.cn/problem/P5473",target:"_blank",rel:"noopener noreferrer"},X=s("P5473[NOI2019]I \u541B\u7684\u63A2\u9669"),Z={href:"https://www.luogu.com.cn/problem/P5208",target:"_blank",rel:"noopener noreferrer"},$=s("P5208[WC2019]I \u541B\u7684\u5546\u5E97"),nn=n("h2",{id:"\u53C2\u8003\u8D44\u6599\u4E0E\u62D3\u5C55\u9605\u8BFB",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53C2\u8003\u8D44\u6599\u4E0E\u62D3\u5C55\u9605\u8BFB","aria-hidden":"true"},"#"),s(" \u53C2\u8003\u8D44\u6599\u4E0E\u62D3\u5C55\u9605\u8BFB")],-1),sn={href:"https://www.cnblogs.com/tsreaper/p/pipe-interactive.html",target:"_blank",rel:"noopener noreferrer"},an=s("\u7528 Linux \u7BA1\u9053\u5B9E\u73B0 online judge \u7684\u4EA4\u4E92\u9898\u529F\u80FD");function pn(tn,on){const a=l("ExternalLinkIcon");return e(),c("div",null,[i,k,n("p",null,[r,n("a",d,[v,p(a)]),m]),b,f,w,y,h,n("ul",null,[n("li",null,[n("a",_,[g,p(a)])]),n("li",null,[n("a",x,[q,p(a)])]),n("li",null,[n("a",j,[N,p(a)])]),n("li",null,[n("a",P,[I,p(a)])]),n("li",null,[n("a",U,[z,p(a)])])]),O,n("p",null,[S,n("a",C,[F,p(a)]),A]),V,M,W,n("p",null,[B,n("a",L,[E,p(a)]),J]),n("p",null,[T,n("a",G,[R,p(a)]),Y]),D,n("ul",null,[n("li",null,[n("a",H,[K,p(a)])]),n("li",null,[n("a",Q,[X,p(a)])]),n("li",null,[n("a",Z,[$,p(a)])])]),nn,n("ul",null,[n("li",null,[n("a",sn,[an,p(a)])])])])}var ln=o(u,[["render",pn],["__file","interaction.html.vue"]]);export{ln as default};
