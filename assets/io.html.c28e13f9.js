import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c,a as n,b as p,e as t,d as s,r as l}from"./app.29a33290.js";const i={},u=t(`<h1 id="\u8BFB\u5165\u3001\u8F93\u51FA\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u8BFB\u5165\u3001\u8F93\u51FA\u4F18\u5316" aria-hidden="true">#</a> \u8BFB\u5165\u3001\u8F93\u51FA\u4F18\u5316</h1><p>\u5728\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C<code>std::cin/std::cout</code> \u662F\u6781\u4E3A\u8FDF\u7F13\u7684\u8BFB\u5165/\u8F93\u51FA\u65B9\u5F0F\uFF0C\u800C <code>scanf/printf</code> \u6BD4 <code>std::cin/std::cout</code> \u5FEB\u5F97\u591A\u3002</p><div class="custom-container info"><p class="custom-container-title">\u6CE8\u610F</p><p><code>cin</code>/<code>cout</code> \u4E0E <code>scanf</code>/<code>printf</code> \u7684\u5B9E\u9645\u901F\u5EA6\u5DEE\u4F1A\u968F\u7F16\u8BD1\u5668\u548C\u64CD\u4F5C\u7CFB\u7EDF\u7684\u4E0D\u540C\u53D1\u751F\u4E00\u5B9A\u7684\u6539\u53D8\u3002\u5982\u679C\u60F3\u8981\u8FDB\u884C\u8BE6\u7EC6\u5BF9\u6BD4\uFF0C\u8BF7\u4EE5\u5B9E\u9645\u6D4B\u8BD5\u7ED3\u679C\u4E3A\u51C6\u3002</p></div><p>\u4E0B\u6587\u5C06\u8BE6\u7EC6\u4ECB\u7ECD\u8BFB\u5165\u8F93\u51FA\u7684\u4F18\u5316\u65B9\u6CD5\u3002</p><h2 id="\u5173\u95ED\u540C\u6B65-\u89E3\u9664\u7ED1\u5B9A" tabindex="-1"><a class="header-anchor" href="#\u5173\u95ED\u540C\u6B65-\u89E3\u9664\u7ED1\u5B9A" aria-hidden="true">#</a> \u5173\u95ED\u540C\u6B65/\u89E3\u9664\u7ED1\u5B9A</h2><h3 id="std-ios-sync-with-stdio-false" tabindex="-1"><a class="header-anchor" href="#std-ios-sync-with-stdio-false" aria-hidden="true">#</a> <code>std::ios::sync_with_stdio(false)</code></h3><p>\u8FD9\u4E2A\u51FD\u6570\u662F\u4E00\u4E2A\u201C\u662F\u5426\u517C\u5BB9 stdio\u201D\u7684\u5F00\u5173\uFF0CC++ \u4E3A\u4E86\u517C\u5BB9 C\uFF0C\u4FDD\u8BC1\u7A0B\u5E8F\u5728\u4F7F\u7528\u4E86 <code>printf</code> \u548C <code>std::cout</code> \u7684\u65F6\u5019\u4E0D\u53D1\u751F\u6DF7\u4E71\uFF0C\u5C06\u8F93\u51FA\u6D41\u7ED1\u5230\u4E86\u4E00\u8D77\u3002\u540C\u6B65\u7684\u8F93\u51FA\u6D41\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\u3002</p><p>\u8FD9\u5176\u5B9E\u662F C++ \u4E3A\u4E86\u517C\u5BB9\u800C\u91C7\u53D6\u7684\u4FDD\u5B88\u63AA\u65BD\uFF0C\u4E5F\u662F\u4F7F <code>cin</code>/<code>cout</code> \u901F\u5EA6\u8F83\u6162\u7684\u4E3B\u8981\u539F\u56E0\u3002\u6211\u4EEC\u53EF\u4EE5\u5728\u8FDB\u884C IO \u64CD\u4F5C\u4E4B\u524D\u5C06 stdio \u89E3\u9664\u7ED1\u5B9A\uFF0C\u4F46\u662F\u5728\u8FD9\u6837\u505A\u4E4B\u540E\u8981\u6CE8\u610F\u4E0D\u80FD\u540C\u65F6\u4F7F\u7528 <code>std::cin</code> \u548C <code>scanf</code>\uFF0C\u4E5F\u4E0D\u80FD\u540C\u65F6\u4F7F\u7528 <code>std::cout</code> \u548C <code>printf</code>\uFF0C\u4F46\u662F\u53EF\u4EE5\u540C\u65F6\u4F7F\u7528 <code>std::cin</code> \u548C <code>printf</code>\uFF0C\u4E5F\u53EF\u4EE5\u540C\u65F6\u4F7F\u7528 <code>scanf</code> \u548C <code>std::cout</code>\u3002</p><h3 id="tie" tabindex="-1"><a class="header-anchor" href="#tie" aria-hidden="true">#</a> <code>tie</code></h3><p>tie \u662F\u5C06\u4E24\u4E2A stream \u7ED1\u5B9A\u7684\u51FD\u6570\uFF0C\u7A7A\u53C2\u6570\u7684\u8BDD\u8FD4\u56DE\u5F53\u524D\u7684\u8F93\u51FA\u6D41\u6307\u9488\u3002</p><p>\u5728\u9ED8\u8BA4\u7684\u60C5\u51B5\u4E0B <code>std::cin</code> \u7ED1\u5B9A\u7684\u662F <code>std::cout</code>\uFF0C\u6BCF\u6B21\u6267\u884C <code>&lt;&lt;</code> \u64CD\u4F5C\u7B26\u7684\u65F6\u5019\u90FD\u8981\u8C03\u7528 <code>flush()</code> \u6765\u6E05\u7406 stream buffer\uFF0C\u8FD9\u6837\u4F1A\u589E\u52A0 IO \u8D1F\u62C5\u3002\u53EF\u4EE5\u901A\u8FC7 <code>std::cin.tie(0)</code>\uFF080 \u8868\u793A NULL\uFF09\u6765\u89E3\u9664 <code>std::cin</code> \u4E0E <code>std::cout</code> \u7684\u7ED1\u5B9A\uFF0C\u8FDB\u4E00\u6B65\u52A0\u5FEB\u6267\u884C\u6548\u7387\u3002</p><p>\u4F46\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u5728\u89E3\u9664\u4E86 <code>std::cin</code> \u548C <code>std::cout</code> \u7684\u7ED1\u5B9A\u540E\uFF0C\u7A0B\u5E8F\u4E2D\u5FC5\u987B\u624B\u52A8 <code>flush</code> \u624D\u80FD\u786E\u4FDD\u6BCF\u6B21 <code>std::cout</code> \u5C55\u73B0\u7684\u5185\u5BB9\u53EF\u4EE5\u5728 <code>std::cin</code> \u524D\u51FA\u73B0\u3002\u8FD9\u662F\u56E0\u4E3A <code>std::cout</code> \u88AB buffer \u4E3A\u9ED8\u8BA4\u8BBE\u7F6E\u3002\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cout
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please input your name: &quot;</span>
    <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>flush<span class="token punctuation">;</span>  <span class="token comment">// \u6216\u8005: std::endl;</span>
                    <span class="token comment">// \u56E0\u4E3A\u6BCF\u6B21\u8C03\u7528std::endl\u90FD\u4F1Aflush\u8F93\u51FA\u7F13\u51B2\u533A\uFF0C\u800C \\n \u5219\u4E0D\u4F1A\u3002</span>
<span class="token comment">// \u4F46\u8BF7\u8C28\u614E\u4F7F\u7528\uFF0C\u8FC7\u591A\u7684flush\u4F1A\u5F71\u54CD\u7A0B\u5E8F\u6548\u7387</span>
std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4EE3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5982\u679C\u7F16\u8BD1\u5F00\u542F\u4E86 C++11 \u6216\u66F4\u9AD8\u7248\u672C\uFF0C\u5EFA\u8BAE\u4F7F\u7528 std::cin.tie(nullptr);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8BFB\u5165\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u8BFB\u5165\u4F18\u5316" aria-hidden="true">#</a> \u8BFB\u5165\u4F18\u5316</h2><p><code>scanf</code> \u548C <code>printf</code> \u4F9D\u7136\u6709\u4F18\u5316\u7684\u7A7A\u95F4\uFF0C\u8FD9\u5C31\u662F\u672C\u7AE0\u6240\u4ECB\u7ECD\u7684\u5185\u5BB9\u2014\u2014\u8BFB\u5165\u548C\u8F93\u51FA\u4F18\u5316\u3002</p><ul><li>\u6CE8\u610F\uFF0C\u672C\u9875\u9762\u4E2D\u4ECB\u7ECD\u7684\u8BFB\u5165\u548C\u8F93\u51FA\u4F18\u5316\u5747\u9488\u5BF9\u6574\u578B\u6570\u636E\uFF0C\u82E5\u8981\u652F\u6301\u5176\u4ED6\u7C7B\u578B\u7684\u6570\u636E\uFF08\u5982\u6D6E\u70B9\u6570\uFF09\uFF0C\u53EF\u81EA\u884C\u6309\u7167\u672C\u9875\u9762\u4ECB\u7ECD\u7684\u4F18\u5316\u539F\u7406\u6765\u7F16\u5199\u4EE3\u7801\u3002</li></ul><h3 id="\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#\u539F\u7406" aria-hidden="true">#</a> \u539F\u7406</h3><p>\u4F17\u6240\u5468\u77E5\uFF0C<code>getchar</code> \u662F\u7528\u6765\u8BFB\u5165 1 byte \u7684\u6570\u636E\u5E76\u5C06\u5176\u8F6C\u6362\u4E3A <code>char</code> \u7C7B\u578B\u7684\u51FD\u6570\uFF0C\u4E14\u901F\u5EA6\u5F88\u5FEB\uFF0C\u6545\u53EF\u4EE5\u7528\u201C\u8BFB\u5165\u5B57\u7B26\u2014\u2014\u8F6C\u6362\u4E3A\u6574\u578B\u201D\u6765\u4EE3\u66FF\u7F13\u6162\u7684\u8BFB\u5165</p><p>\u6BCF\u4E2A\u6574\u6570\u7531\u4E24\u90E8\u5206\u7EC4\u6210\u2014\u2014\u7B26\u53F7\u548C\u6570\u5B57</p><p>\u6574\u6570\u7684 &#39;+&#39; \u901A\u5E38\u662F\u7701\u7565\u7684\uFF0C\u4E14\u4E0D\u4F1A\u5BF9\u540E\u9762\u6570\u5B57\u6240\u4EE3\u8868\u7684\u503C\u4EA7\u751F\u5F71\u54CD\uFF0C\u800C &#39;-&#39; \u4E0D\u53EF\u7701\u7565\uFF0C\u56E0\u6B64\u8981\u8FDB\u884C\u5224\u5B9A</p><p>10 \u8FDB\u5236\u6574\u6570\u4E2D\u662F\u4E0D\u542B\u7A7A\u683C\u6216\u9664 0~9 \u548C\u6B63\u8D1F\u53F7\u5916\u7684\u5176\u4ED6\u5B57\u7B26\u7684\uFF0C\u56E0\u6B64\u5728\u8BFB\u5165\u4E0D\u5E94\u5B58\u5728\u4E8E\u6574\u6570\u4E2D\u7684\u5B57\u7B26\uFF08\u901A\u5E38\u4E3A\u7A7A\u683C\uFF09\u65F6\uFF0C\u5C31\u53EF\u4EE5\u5224\u5B9A\u5DF2\u7ECF\u8BFB\u5165\u7ED3\u675F</p><p>C \u548C C++ \u8BED\u8A00\u5206\u522B\u5728 ctype.h \u548C cctype \u5934\u6587\u4EF6\u4E2D\uFF0C\u63D0\u4F9B\u4E86\u51FD\u6570 <code>isdigit</code>, \u8FD9\u4E2A\u51FD\u6570\u4F1A\u68C0\u67E5\u4F20\u5165\u7684\u53C2\u6570\u662F\u5426\u4E3A\u5341\u8FDB\u5236\u6570\u5B57\u5B57\u7B26\uFF0C\u662F\u5219\u8FD4\u56DE <strong>true</strong>\uFF0C\u5426\u5219\u8FD4\u56DE <strong>false</strong>\u3002\u5BF9\u5E94\u7684\uFF0C\u5728\u4E0B\u9762\u7684\u4EE3\u7801\u4E2D\uFF0C\u53EF\u4EE5\u4F7F\u7528 <code>isdigit(ch)</code> \u4EE3\u66FF <code>ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;</code>\uFF0C\u800C\u53EF\u4EE5\u4F7F\u7528 <code>!isdigit(ch)</code> \u4EE3\u66FF <code>ch &lt;&#39;0&#39; || ch&gt; &#39;9&#39;</code></p><h3 id="\u4EE3\u7801\u5B9E\u73B0-1" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0-1" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">||</span> ch <span class="token operator">&gt;</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ch \u4E0D\u662F\u6570\u5B57\u65F6</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// \u5224\u65AD\u662F\u5426\u4E3A\u8D1F</span>
    ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// \u7EE7\u7EED\u8BFB\u5165</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ch \u662F\u6570\u5B57\u65F6</span>
    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C06\u65B0\u8BFB\u5165\u7684\u6570\u5B57\u2019\u52A0\u2019\u5728 x \u7684\u540E\u9762</span>
    <span class="token comment">// x \u662F int \u7C7B\u578B\uFF0Cchar \u7C7B\u578B\u7684 ch \u548C \u20190\u2019 \u4F1A\u88AB\u81EA\u52A8\u8F6C\u4E3A\u5176\u5BF9\u5E94\u7684</span>
    <span class="token comment">// ASCII \u7801\uFF0C\u76F8\u5F53\u4E8E\u5C06 ch \u8F6C\u5316\u4E3A\u5BF9\u5E94\u6570\u5B57</span>
    <span class="token comment">// \u6B64\u5904\u4E5F\u53EF\u4EE5\u4F7F\u7528 (x&lt;&lt;3)+(x&lt;&lt;1) \u7684\u5199\u6CD5\u6765\u4EE3\u66FF x*10</span>
    ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u7EE7\u7EED\u8BFB\u5165</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> w<span class="token punctuation">;</span>  <span class="token comment">// \u6570\u5B57 * \u6B63\u8D1F\u53F7 = \u5B9E\u9645\u6570\u503C</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u4E3E\u4F8B</li></ul><p>\u8BFB\u5165 num \u53EF\u5199\u4E3A <code>num=read();</code></p><h2 id="\u8F93\u51FA\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA\u4F18\u5316" aria-hidden="true">#</a> \u8F93\u51FA\u4F18\u5316</h2><h3 id="\u539F\u7406-1" tabindex="-1"><a class="header-anchor" href="#\u539F\u7406-1" aria-hidden="true">#</a> \u539F\u7406</h3><p>\u540C\u6837\u662F\u4F17\u6240\u5468\u77E5\uFF0C<code>putchar</code> \u662F\u7528\u6765\u8F93\u51FA\u5355\u4E2A\u5B57\u7B26\u7684\u51FD\u6570</p><p>\u56E0\u6B64\u5C06\u6570\u5B57\u7684\u6BCF\u4E00\u4F4D\u8F6C\u5316\u4E3A\u5B57\u7B26\u8F93\u51FA\u4EE5\u52A0\u901F</p><p>\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u8D1F\u53F7\u8981\u5355\u72EC\u5224\u65AD\u8F93\u51FA\uFF0C\u5E76\u4E14\u6BCF\u6B21 %\uFF08mod\uFF09\u53D6\u51FA\u7684\u662F\u6570\u5B57\u672B\u4F4D\uFF0C\u56E0\u6B64\u8981\u5012\u5E8F\u8F93\u51FA</p><h3 id="\u4EE3\u7801\u5B9E\u73B0-2" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0-2" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5224\u8D1F + \u8F93\u51FA\u8D1F\u53F7 + \u53D8\u539F\u6570\u4E3A\u6B63\u6570</span>
    x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u9012\u5F52\uFF0C\u5C06\u9664\u6700\u540E\u4E00\u4F4D\u5916\u7684\u5176\u4ED6\u90E8\u5206\u653E\u5230\u9012\u5F52\u4E2D\u8F93\u51FA</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5DF2\u7ECF\u8F93\u51FA\uFF08\u9012\u5F52\uFF09\u5B8C x \u672B\u4F4D\u524D\u7684\u6240\u6709\u6570\u5B57\uFF0C\u8F93\u51FA\u672B\u4F4D</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u9012\u5F52\u5B9E\u73B0\u5E38\u6570\u662F\u8F83\u5927\u7684\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5199\u4E00\u4E2A\u6808\u6765\u5B9E\u73B0\u8FD9\u4E2A\u8FC7\u7A0B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> sta<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span>sta<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 48 \u662F &#39;0&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u4E3E\u4F8B</li></ul><p>\u8F93\u51FA num \u53EF\u5199\u4E3A <code>write(num);</code></p><h2 id="\u66F4\u5FEB\u7684\u8BFB\u5165-\u8F93\u51FA\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u66F4\u5FEB\u7684\u8BFB\u5165-\u8F93\u51FA\u4F18\u5316" aria-hidden="true">#</a> \u66F4\u5FEB\u7684\u8BFB\u5165/\u8F93\u51FA\u4F18\u5316</h2><p>\u901A\u8FC7 <code>fread</code> \u6216\u8005 <code>mmap</code> \u53EF\u4EE5\u5B9E\u73B0\u66F4\u5FEB\u7684\u8BFB\u5165\u3002</p><p><code>fread</code> \u80FD\u5C06\u9700\u8981\u7684\u6587\u4EF6\u90E8\u5206\u8BFB\u5165\u5185\u5B58\u7F13\u51B2\u533A\u3002<code>mmap</code> \u5219\u4F1A\u8C03\u5EA6\u5185\u6838\u7EA7\u51FD\u6570\uFF0C\u5C06\u6587\u4EF6\u4E00\u6B21\u6027\u5730\u6620\u5C04\u5230\u5185\u5B58\u4E2D\uFF0C\u7C7B\u4F3C\u4E8E\u53EF\u4EE5\u6307\u9488\u5F15\u7528\u7684\u5185\u5B58\u533A\u57DF\u3002\u6240\u4EE5\u5728\u65E5\u5E38\u7A0B\u5E8F\u8BFB\u5199\u65F6\uFF0C\u53EA\u9700\u8981\u91CD\u590D\u8BFB\u53D6\u90E8\u5206\u6587\u4EF6\u53EF\u4EE5\u4F7F\u7528 <code>fread</code>\uFF0C\u56E0\u4E3A\u5982\u679C\u7528 <code>mmap</code> \u53CD\u590D\u8BFB\u53D6\u4E00\u5C0F\u5757\u6587\u4EF6\uFF0C\u505A\u4E00\u6B21\u6027\u5185\u5B58\u6620\u5C04\u5E76\u4E14\u5185\u6838\u5904\u7406 page fault \u7684\u82B1\u8D39\u4F1A\u8FDC\u6BD4\u4F7F\u7528 <code>fread</code> \u7684\u5185\u6838\u7EA7\u51FD\u6570\u8C03\u5EA6\u5927\u3002</p><p>\u4E00\u6B21\u6027\u8BFB\u5165\u7F13\u51B2\u533A\u7684\u64CD\u4F5C\u6BD4\u9010\u4E2A\u5B57\u7B26\u8BFB\u5165\uFF08<code>getchar</code>,<code>putchar</code>\uFF09\u8981\u5FEB\u7684\u591A\u3002\u56E0\u4E3A\u786C\u76D8\u7684\u591A\u6B21\u8BFB\u5199\u901F\u5EA6\u662F\u8981\u6162\u4E8E\u76F4\u63A5\u8BFB\u53D6\u5185\u5B58\u7684\uFF0C\u6240\u4EE5\u5148\u4E00\u6B21\u6027\u8BFB\u5230\u7F13\u5B58\u533A\u91CC\u518D\u4ECE\u7F13\u5B58\u533A\u8BFB\u5165\u8981\u5FEB\u7684\u591A\u3002\u5E76\u4E14 <code>mmap</code> \u786E\u4FDD\u4E86\u8FDB\u7A0B\u95F4\u81EA\u52A8\u5171\u4EAB\uFF0C\u5B58\u50A8\u533A\u5982\u679C\u53EF\u4EE5\u4E5F\u4F1A\u4E0E\u5185\u6838\u7F13\u5B58\u5206\u4EAB\u4FE1\u606F\uFF0C\u786E\u4FDD\u4E86\u66F4\u5C11\u7684\u62F7\u8D1D\u64CD\u4F5C\u3002</p><p>\u66F4\u901A\u7528\u7684\u662F <code>fread</code>\uFF0C\u56E0\u4E3A <code>mmap</code> \u4E0D\u80FD\u5728 Windows \u73AF\u5883\u4E0B\u4F7F\u7528\uFF08\u4F8B\u5982 CodeForces \u7684 tester\uFF09\u3002</p><p><code>fread</code> \u7C7B\u4F3C\u4E8E\u53C2\u6570\u4E3A <code>&quot;%s&quot;</code> \u7684 <code>scanf</code>\uFF0C\u4E0D\u8FC7\u5B83\u66F4\u4E3A\u5FEB\u901F\uFF0C\u800C\u4E14\u53EF\u4EE5\u4E00\u6B21\u6027\u8BFB\u5165\u82E5\u5E72\u4E2A\u5B57\u7B26\uFF08\u5305\u62EC\u7A7A\u683C\u6362\u884C\u7B49\u5236\u8868\u7B26\uFF09\uFF0C\u5982\u679C\u7F13\u5B58\u533A\u8DB3\u591F\u5927\uFF0C\u751A\u81F3\u53EF\u4EE5\u4E00\u6B21\u6027\u8BFB\u5165\u6574\u4E2A\u6587\u4EF6\u3002</p><p>\u5BF9\u4E8E\u8F93\u51FA\uFF0C\u6211\u4EEC\u8FD8\u6709\u5BF9\u5E94\u7684 <code>fwrite</code> \u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t count<span class="token punctuation">,</span>
                  std<span class="token double-colon punctuation">::</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>size_t <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t count<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528\u793A\u4F8B\uFF1A<code>fread(Buf, 1, SIZE, stdin)</code>\uFF0C\u8868\u793A\u4ECE stdin \u6587\u4EF6\u6D41\u4E2D\u8BFB\u5165 SIZE \u4E2A\u5927\u5C0F\u4E3A 1 byte \u7684\u6570\u636E\u5757\u5230 Buf \u4E2D\u3002</p><p>\u8BFB\u5165\u4E4B\u540E\u7684\u4F7F\u7528\u5C31\u8DDF\u666E\u901A\u7684\u8BFB\u5165\u4F18\u5316\u76F8\u4F3C\u4E86\uFF0C\u53EA\u9700\u8981\u91CD\u5B9A\u4E49\u4E00\u4E0B getchar\u3002\u5B83\u539F\u6765\u662F\u4ECE\u6587\u4EF6\u4E2D\u8BFB\u5165\u4E00\u4E2A char\uFF0C\u73B0\u5728\u53D8\u6210\u4ECE Buf \u4E2D\u8BFB\u5165\u4E00\u4E2A char\uFF0C\u4E5F\u5C31\u662F\u5934\u6307\u9488\u5411\u540E\u79FB\u52A8\u4E00\u4F4D\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">gc</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                               </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token operator">?</span> <span class="token constant">EOF</span>                                                               </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fwrite</code> \u4E5F\u662F\u7C7B\u4F3C\u7684\uFF0C\u5148\u653E\u5165\u4E00\u4E2A <code>OutBuf[MAXSIZE]</code> \u4E2D\uFF0C\u6700\u540E\u901A\u8FC7 <code>fwrite</code> \u4E00\u6B21\u6027\u5C06 <code>OutBuf</code> \u8F93\u51FA\u3002</p><p>\u53C2\u8003\u4EE3\u7801\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">namespace</span> IO <span class="token punctuation">{</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXSIZE <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">gc</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                               </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MAXSIZE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token operator">?</span> <span class="token constant">EOF</span>                                                               </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> pbuf<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp <span class="token operator">=</span> pbuf<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">-</span> pbuf <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>pbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pp <span class="token operator">=</span> pbuf<span class="token punctuation">;</span>
  <span class="token operator">*</span>pp<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> sta<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>sta<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>  <span class="token comment">// namespace IO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8F93\u5165\u8F93\u51FA\u7684\u7F13\u51B2" tabindex="-1"><a class="header-anchor" href="#\u8F93\u5165\u8F93\u51FA\u7684\u7F13\u51B2" aria-hidden="true">#</a> \u8F93\u5165\u8F93\u51FA\u7684\u7F13\u51B2</h2><p><code>printf</code> \u548C <code>scanf</code> \u662F\u6709\u7F13\u51B2\u533A\u7684\u3002\u8FD9\u4E5F\u5C31\u662F\u4E3A\u4EC0\u4E48\uFF0C\u5982\u679C\u8F93\u5165\u51FD\u6570\u7D27\u8DDF\u5728\u8F93\u51FA\u51FD\u6570\u4E4B\u540E/\u8F93\u51FA\u51FD\u6570\u7D27\u8DDF\u5728\u8F93\u5165\u51FD\u6570\u4E4B\u540E\u53EF\u80FD\u5BFC\u81F4\u9519\u8BEF\u3002</p><h3 id="\u5237\u65B0\u7F13\u51B2\u533A" tabindex="-1"><a class="header-anchor" href="#\u5237\u65B0\u7F13\u51B2\u533A" aria-hidden="true">#</a> \u5237\u65B0\u7F13\u51B2\u533A</h3><ol><li>\u7A0B\u5E8F\u7ED3\u675F</li><li>\u5173\u95ED\u6587\u4EF6</li><li><code>printf</code> \u8F93\u51FA <code>\\r</code> \u6216\u8005 <code>\\n</code> \u5230\u7EC8\u7AEF\u7684\u65F6\u5019\uFF08\u6CE8\uFF1A\u5982\u679C\u662F\u8F93\u51FA\u5230\u6587\u4EF6\uFF0C\u5219\u4E0D\u4F1A\u5237\u65B0\u7F13\u51B2\u533A\uFF09</li><li>\u624B\u52A8 <code>fflush()</code></li><li>\u7F13\u51B2\u533A\u6EE1\u81EA\u52A8\u5237\u65B0</li><li><code>cout</code> \u8F93\u51FA <code>endl</code></li></ol><h2 id="\u4F7F\u8F93\u5165\u8F93\u51FA\u4F18\u5316\u66F4\u4E3A\u901A\u7528" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u8F93\u5165\u8F93\u51FA\u4F18\u5316\u66F4\u4E3A\u901A\u7528" aria-hidden="true">#</a> \u4F7F\u8F93\u5165\u8F93\u51FA\u4F18\u5316\u66F4\u4E3A\u901A\u7528</h2>`,58),r=s("\u5982\u679C\u4F60\u7684\u7A0B\u5E8F\u4F7F\u7528\u591A\u4E2A\u7C7B\u578B\u7684\u53D8\u91CF\uFF0C\u90A3\u4E48\u53EF\u80FD\u9700\u8981\u5199\u591A\u4E2A\u8F93\u5165\u8F93\u51FA\u4F18\u5316\u7684\u51FD\u6570\u3002\u4E0B\u9762\u7ED9\u51FA\u7684\u4EE3\u7801\u4F7F\u7528 "),k={href:"http://www.cplusplus.com/doc/oldtutorial/templates",target:"_blank",rel:"noopener noreferrer"},d=s("C++ \u4E2D\u7684 "),v=n("code",null,"template",-1),m=s(" \u5B9E\u73B0\u4E86\u5BF9\u4E8E\u6240\u6709\u6574\u6570\u7C7B\u578B\u7684\u8F93\u5165\u8F93\u51FA\u4F18\u5316\u3002"),b=t(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> T
<span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u58F0\u660E template \u7C7B,\u8981\u6C42\u63D0\u4F9B\u8F93\u5165\u7684\u7C7B\u578BT,\u5E76\u4EE5\u6B64\u7C7B\u578B\u5B9A\u4E49\u5185\u8054\u51FD\u6570 read()</span>
  T sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fl <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C06 sum,fl \u548C ch \u4EE5\u8F93\u5165\u7684\u7C7B\u578B\u5B9A\u4E49</span>
  <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> fl <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum <span class="token operator">*</span> fl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u8981\u5206\u522B\u8F93\u5165 <code>int</code> \u7C7B\u578B\u7684\u53D8\u91CF a\uFF0C<code>long long</code> \u7C7B\u578B\u7684\u53D8\u91CF b \u548C <code>__int128</code> \u7C7B\u578B\u7684\u53D8\u91CF c\uFF0C\u90A3\u4E48\u53EF\u4EE5\u5199\u6210</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>a <span class="token operator">=</span> <span class="token generic-function"><span class="token function">read</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">read</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token generic-function"><span class="token function">read</span><span class="token generic class-name"><span class="token operator">&lt;</span>__int128<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B8C\u6574\u5E26\u8C03\u8BD5\u7248" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u5E26\u8C03\u8BD5\u7248" aria-hidden="true">#</a> \u5B8C\u6574\u5E26\u8C03\u8BD5\u7248</h2><p>\u5173\u95ED\u8C03\u8BD5\u5F00\u5173\u65F6\u4F7F\u7528 <code>fread()</code>,<code>fwrite()</code>\uFF0C\u9000\u51FA\u65F6\u81EA\u52A8\u6790\u6784\u6267\u884C <code>fwrite()</code>\u3002</p><p>\u5F00\u542F\u8C03\u8BD5\u5F00\u5173\u65F6\u4F7F\u7528 <code>getchar()</code>,<code>putchar()</code>\uFF0C\u4FBF\u4E8E\u8C03\u8BD5\u3002</p><p>\u82E5\u8981\u5F00\u542F\u6587\u4EF6\u8BFB\u5199\u65F6\uFF0C\u8BF7\u5728\u6240\u6709\u8BFB\u5199\u4E4B\u524D\u52A0\u5165 <code>freopen()</code>\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// #define DEBUG 1  // \u8C03\u8BD5\u5F00\u5173</span>
<span class="token keyword">struct</span> <span class="token class-name">IO</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">isdigit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> </span><span class="token char">&#39;0&#39;</span> <span class="token expression"><span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> </span><span class="token char">&#39;9&#39;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
  <span class="token keyword">char</span> pbuf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token function">IO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">p1</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pp</span><span class="token punctuation">(</span>pbuf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token operator">~</span><span class="token function">IO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>pbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pp <span class="token operator">-</span> pbuf<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG  </span><span class="token comment">// \u8C03\u8BD5\uFF0C\u53EF\u663E\u793A\u5B57\u7B26</span></span>
    <span class="token keyword">return</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MAXSIZE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1 <span class="token operator">==</span> p2 <span class="token operator">?</span> <span class="token char">&#39; &#39;</span> <span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">blank</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">register</span> <span class="token keyword">double</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">register</span> <span class="token keyword">bool</span> sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">register</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        tmp <span class="token operator">/=</span> <span class="token number">10.0</span><span class="token punctuation">,</span> x <span class="token operator">+=</span> tmp <span class="token operator">*</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">register</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token function">blank</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">blank</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>s<span class="token operator">++</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>
    <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">blank</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG  </span><span class="token comment">// \u8C03\u8BD5\uFF0C\u53EF\u663E\u793A\u5B57\u7B26</span></span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">-</span> pbuf <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>pbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MAXSIZE<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pp <span class="token operator">=</span> pbuf<span class="token punctuation">;</span>
    <span class="token operator">*</span>pp<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">}</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8D1F\u6570\u8F93\u51FA</span>
    <span class="token keyword">static</span> T sta<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    T top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>sta<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> <span class="token keyword">char</span> lastChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>lastChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> io<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2>`,9),h={href:"http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html",target:"_blank",rel:"noopener noreferrer"},f=s("http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html"),w={href:"http://meme.biology.tohoku.ac.jp/students/iwasaki/cxx/speed.html",target:"_blank",rel:"noopener noreferrer"},y=s("http://meme.biology.tohoku.ac.jp/students/iwasaki/cxx/speed.html"),g={href:"https://marc.info/?l=linux-kernel&m=95496636207616&w=2",target:"_blank",rel:"noopener noreferrer"},x=s("https://marc.info/\uFF1Fl=linux-kernel&m=95496636207616&w=2");function _(I,E){const a=l("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[r,n("a",k,[d,v,p(a)]),m]),b,n("p",null,[n("a",h,[f,p(a)])]),n("p",null,[n("a",w,[y,p(a)])]),n("p",null,[n("a",g,[x,p(a)])])])}var B=o(i,[["render",_],["__file","io.html.vue"]]);export{B as default};
